<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>__GI___libc_free (1 samples, 0.02%)</title><rect x="1167.7" y="229" width="0.2" height="15.0" fill="rgb(232,229,46)" rx="2" ry="2" />
<text  x="1170.71" y="239.5" ></text>
</g>
<g >
<title>tokio::time::driver::Driver&lt;P&gt;::park_internal (143 samples, 2.18%)</title><rect x="573.2" y="245" width="25.7" height="15.0" fill="rgb(218,200,19)" rx="2" ry="2" />
<text  x="576.21" y="255.5" >t..</text>
</g>
<g >
<title>__GI_madvise (1 samples, 0.02%)</title><rect x="131.5" y="373" width="0.2" height="15.0" fill="rgb(250,121,28)" rx="2" ry="2" />
<text  x="134.52" y="383.5" ></text>
</g>
<g >
<title>tokio::time::clock::Clock::now (2 samples, 0.03%)</title><rect x="650.5" y="229" width="0.4" height="15.0" fill="rgb(228,24,6)" rx="2" ry="2" />
<text  x="653.51" y="239.5" ></text>
</g>
<g >
<title>tokio::io::driver::Driver::turn (75 samples, 1.14%)</title><rect x="575.0" y="229" width="13.5" height="15.0" fill="rgb(248,112,35)" rx="2" ry="2" />
<text  x="578.01" y="239.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number::_$u7b$$u7b$closure$u7d$$u7d$::h6974d5980a092302 (2 samples, 0.03%)</title><rect x="400.5" y="117" width="0.3" height="15.0" fill="rgb(249,118,10)" rx="2" ry="2" />
<text  x="403.46" y="127.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::deregister (2 samples, 0.03%)</title><rect x="144.1" y="341" width="0.4" height="15.0" fill="rgb(245,161,13)" rx="2" ry="2" />
<text  x="147.11" y="351.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="142.1" y="309" width="0.2" height="15.0" fill="rgb(250,183,29)" rx="2" ry="2" />
<text  x="145.13" y="319.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (4 samples, 0.06%)</title><rect x="400.3" y="293" width="0.7" height="15.0" fill="rgb(212,41,17)" rx="2" ry="2" />
<text  x="403.28" y="303.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (9 samples, 0.14%)</title><rect x="593.0" y="149" width="1.6" height="15.0" fill="rgb(226,138,15)" rx="2" ry="2" />
<text  x="595.99" y="159.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 0.02%)</title><rect x="401.9" y="389" width="0.2" height="15.0" fill="rgb(233,110,24)" rx="2" ry="2" />
<text  x="404.90" y="399.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="70.6" y="373" width="0.3" height="15.0" fill="rgb(248,102,54)" rx="2" ry="2" />
<text  x="73.58" y="383.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="44.0" y="389" width="0.2" height="15.0" fill="rgb(236,92,16)" rx="2" ry="2" />
<text  x="46.98" y="399.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="650.9" y="213" width="0.2" height="15.0" fill="rgb(223,219,38)" rx="2" ry="2" />
<text  x="653.87" y="223.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (1 samples, 0.02%)</title><rect x="649.6" y="181" width="0.2" height="15.0" fill="rgb(207,172,32)" rx="2" ry="2" />
<text  x="652.62" y="191.5" ></text>
</g>
<g >
<title>mio::sys::unix::tcp::connect (6 samples, 0.09%)</title><rect x="399.2" y="373" width="1.1" height="15.0" fill="rgb(251,181,2)" rx="2" ry="2" />
<text  x="402.20" y="383.5" ></text>
</g>
<g >
<title>tokio::io::driver::Driver::turn (6 samples, 0.09%)</title><rect x="649.3" y="229" width="1.0" height="15.0" fill="rgb(237,186,50)" rx="2" ry="2" />
<text  x="652.26" y="239.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$$LT$futures_util..stream..futures_unordered..FuturesUnordered$LT$Fut$GT$$u20$as$u20$futures_core..stream..Stream$GT$..poll_next..Bomb$LT$core..future..from_generator..GenFuture$LT$tcp_aggregation..read_from_source..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$$GT$::h86764f269f98b492 (196 samples, 2.99%)</title><rect x="343.3" y="373" width="35.2" height="15.0" fill="rgb(253,162,21)" rx="2" ry="2" />
<text  x="346.29" y="383.5" >co..</text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (2 samples, 0.03%)</title><rect x="400.5" y="197" width="0.3" height="15.0" fill="rgb(209,161,28)" rx="2" ry="2" />
<text  x="403.46" y="207.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,379 samples, 21.01%)</title><rect x="732.3" y="229" width="247.9" height="15.0" fill="rgb(229,92,37)" rx="2" ry="2" />
<text  x="735.31" y="239.5" >&lt;core::future::from_generator::Ge..</text>
</g>
<g >
<title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,145 samples, 32.68%)</title><rect x="19.7" y="437" width="385.6" height="15.0" fill="rgb(243,181,0)" rx="2" ry="2" />
<text  x="22.71" y="447.5" >&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::..</text>
</g>
<g >
<title>std::sys::unix::net::Socket::recv_with_flags (273 samples, 4.16%)</title><rect x="990.1" y="133" width="49.1" height="15.0" fill="rgb(238,37,51)" rx="2" ry="2" />
<text  x="993.10" y="143.5" >std:..</text>
</g>
<g >
<title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="917.8" y="117" width="0.2" height="15.0" fill="rgb(216,61,7)" rx="2" ry="2" />
<text  x="920.83" y="127.5" ></text>
</g>
<g >
<title>tokio::time::driver::Driver&lt;P&gt;::park_internal (10 samples, 0.15%)</title><rect x="649.3" y="245" width="1.8" height="15.0" fill="rgb(233,183,25)" rx="2" ry="2" />
<text  x="652.26" y="255.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (7 samples, 0.11%)</title><rect x="132.2" y="373" width="1.3" height="15.0" fill="rgb(220,133,32)" rx="2" ry="2" />
<text  x="135.24" y="383.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (9 samples, 0.14%)</title><rect x="248.0" y="293" width="1.6" height="15.0" fill="rgb(249,166,36)" rx="2" ry="2" />
<text  x="251.01" y="303.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (2 samples, 0.03%)</title><rect x="587.6" y="101" width="0.4" height="15.0" fill="rgb(251,182,51)" rx="2" ry="2" />
<text  x="590.60" y="111.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (54 samples, 0.82%)</title><rect x="10.0" y="469" width="9.7" height="15.0" fill="rgb(215,166,26)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::Thread::new::thread_start (4,365 samples, 66.50%)</title><rect x="405.3" y="485" width="784.7" height="15.0" fill="rgb(254,46,26)" rx="2" ry="2" />
<text  x="408.31" y="495.5" >std::sys::unix::thread::Thread::new::thread_start</text>
</g>
<g >
<title>tokio::signal::unix::driver::Driver::process (13 samples, 0.20%)</title><rect x="589.8" y="229" width="2.3" height="15.0" fill="rgb(245,18,36)" rx="2" ry="2" />
<text  x="592.75" y="239.5" ></text>
</g>
<g >
<title>__libc_close (2 samples, 0.03%)</title><rect x="143.7" y="341" width="0.4" height="15.0" fill="rgb(236,194,33)" rx="2" ry="2" />
<text  x="146.75" y="351.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (36 samples, 0.55%)</title><rect x="1152.4" y="229" width="6.5" height="15.0" fill="rgb(208,5,54)" rx="2" ry="2" />
<text  x="1155.43" y="239.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (2 samples, 0.03%)</title><rect x="174.3" y="325" width="0.4" height="15.0" fill="rgb(235,99,35)" rx="2" ry="2" />
<text  x="177.31" y="335.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number (1 samples, 0.02%)</title><rect x="400.8" y="213" width="0.2" height="15.0" fill="rgb(213,207,41)" rx="2" ry="2" />
<text  x="403.82" y="223.5" ></text>
</g>
<g >
<title>std::time::Instant::checked_add (1 samples, 0.02%)</title><rect x="678.2" y="245" width="0.2" height="15.0" fill="rgb(246,169,8)" rx="2" ry="2" />
<text  x="681.20" y="255.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.12%)</title><rect x="291.5" y="261" width="1.5" height="15.0" fill="rgb(215,178,24)" rx="2" ry="2" />
<text  x="294.52" y="271.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (19 samples, 0.29%)</title><rect x="681.8" y="245" width="3.4" height="15.0" fill="rgb(248,223,53)" rx="2" ry="2" />
<text  x="684.79" y="255.5" ></text>
</g>
<g >
<title>std::time::Instant::now (2 samples, 0.03%)</title><rect x="587.6" y="149" width="0.4" height="15.0" fill="rgb(216,76,30)" rx="2" ry="2" />
<text  x="590.60" y="159.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="1150.6" y="213" width="0.2" height="15.0" fill="rgb(224,132,51)" rx="2" ry="2" />
<text  x="1153.63" y="223.5" ></text>
</g>
<g >
<title>std::time::Instant::now (9 samples, 0.14%)</title><rect x="593.0" y="197" width="1.6" height="15.0" fill="rgb(232,83,42)" rx="2" ry="2" />
<text  x="595.99" y="207.5" ></text>
</g>
<g >
<title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8 samples, 0.12%)</title><rect x="1166.1" y="245" width="1.4" height="15.0" fill="rgb(253,186,44)" rx="2" ry="2" />
<text  x="1169.09" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4,365 samples, 66.50%)</title><rect x="405.3" y="469" width="784.7" height="15.0" fill="rgb(224,171,19)" rx="2" ry="2" />
<text  x="408.31" y="479.5" >&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text>
</g>
<g >
<title>tokio::runtime::spawner::Spawner::spawn (8 samples, 0.12%)</title><rect x="403.0" y="373" width="1.4" height="15.0" fill="rgb(215,149,53)" rx="2" ry="2" />
<text  x="405.97" y="383.5" ></text>
</g>
<g >
<title>tokio::park::thread::clone (1 samples, 0.02%)</title><rect x="13.6" y="165" width="0.2" height="15.0" fill="rgb(231,182,50)" rx="2" ry="2" />
<text  x="16.60" y="175.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="917.8" y="85" width="0.2" height="15.0" fill="rgb(216,120,26)" rx="2" ry="2" />
<text  x="920.83" y="95.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (3 samples, 0.05%)</title><rect x="914.6" y="181" width="0.5" height="15.0" fill="rgb(253,105,33)" rx="2" ry="2" />
<text  x="917.59" y="191.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (56 samples, 0.85%)</title><rect x="908.5" y="197" width="10.0" height="15.0" fill="rgb(226,213,34)" rx="2" ry="2" />
<text  x="911.48" y="207.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,586 samples, 39.40%)</title><rect x="701.2" y="245" width="464.9" height="15.0" fill="rgb(253,0,24)" rx="2" ry="2" />
<text  x="704.21" y="255.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::fu..</text>
</g>
<g >
<title>syscall (5 samples, 0.08%)</title><rect x="250.7" y="277" width="0.9" height="15.0" fill="rgb(245,140,28)" rx="2" ry="2" />
<text  x="253.71" y="287.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (41 samples, 0.62%)</title><rect x="959.2" y="197" width="7.3" height="15.0" fill="rgb(236,14,28)" rx="2" ry="2" />
<text  x="962.18" y="207.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number (2 samples, 0.03%)</title><rect x="400.5" y="149" width="0.3" height="15.0" fill="rgb(238,73,9)" rx="2" ry="2" />
<text  x="403.46" y="159.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (265 samples, 4.04%)</title><rect x="293.7" y="341" width="47.6" height="15.0" fill="rgb(231,36,8)" rx="2" ry="2" />
<text  x="296.67" y="351.5" >toki..</text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (43 samples, 0.66%)</title><rect x="370.8" y="357" width="7.7" height="15.0" fill="rgb(215,8,48)" rx="2" ry="2" />
<text  x="373.80" y="367.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (240 samples, 3.66%)</title><rect x="875.4" y="213" width="43.1" height="15.0" fill="rgb(249,149,7)" rx="2" ry="2" />
<text  x="878.41" y="223.5" >futu..</text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.02%)</title><rect x="71.1" y="389" width="0.2" height="15.0" fill="rgb(253,72,29)" rx="2" ry="2" />
<text  x="74.12" y="399.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.12%)</title><rect x="586.7" y="165" width="1.4" height="15.0" fill="rgb(207,178,15)" rx="2" ry="2" />
<text  x="589.70" y="175.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (11 samples, 0.17%)</title><rect x="249.6" y="293" width="2.0" height="15.0" fill="rgb(252,97,20)" rx="2" ry="2" />
<text  x="252.63" y="303.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hd38309c108fe679d (54 samples, 0.82%)</title><rect x="10.0" y="405" width="9.7" height="15.0" fill="rgb(239,67,4)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_ipv4_addr (3 samples, 0.05%)</title><rect x="400.3" y="261" width="0.5" height="15.0" fill="rgb(219,157,15)" rx="2" ry="2" />
<text  x="403.28" y="271.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,416 samples, 21.57%)</title><rect x="144.5" y="389" width="254.5" height="15.0" fill="rgb(224,67,13)" rx="2" ry="2" />
<text  x="147.47" y="399.5" >futures_util::stream::stream::Str..</text>
</g>
<g >
<title>alloc::fmt::format (2 samples, 0.03%)</title><rect x="142.1" y="389" width="0.4" height="15.0" fill="rgb(219,210,23)" rx="2" ry="2" />
<text  x="145.13" y="399.5" ></text>
</g>
<g >
<title>std::sys::unix::net::Socket::read (273 samples, 4.16%)</title><rect x="990.1" y="149" width="49.1" height="15.0" fill="rgb(219,165,26)" rx="2" ry="2" />
<text  x="993.10" y="159.5" >std:..</text>
</g>
<g >
<title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (1 samples, 0.02%)</title><rect x="401.0" y="325" width="0.2" height="15.0" fill="rgb(218,220,31)" rx="2" ry="2" />
<text  x="404.00" y="335.5" ></text>
</g>
<g >
<title>syscall (16 samples, 0.24%)</title><rect x="16.7" y="181" width="2.8" height="15.0" fill="rgb(243,114,46)" rx="2" ry="2" />
<text  x="19.65" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (73 samples, 1.11%)</title><rect x="279.8" y="277" width="13.2" height="15.0" fill="rgb(230,126,9)" rx="2" ry="2" />
<text  x="282.83" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="142.1" y="325" width="0.2" height="15.0" fill="rgb(219,206,26)" rx="2" ry="2" />
<text  x="145.13" y="335.5" ></text>
</g>
<g >
<title>futures_task::waker_ref::WakerRef::new_unowned (1 samples, 0.02%)</title><rect x="398.8" y="373" width="0.2" height="15.0" fill="rgb(208,218,47)" rx="2" ry="2" />
<text  x="401.84" y="383.5" ></text>
</g>
<g >
<title>tokio::util::rand::thread_rng_n (1 samples, 0.02%)</title><rect x="13.8" y="197" width="0.2" height="15.0" fill="rgb(216,151,47)" rx="2" ry="2" />
<text  x="16.78" y="207.5" ></text>
</g>
<g >
<title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.05%)</title><rect x="587.1" y="149" width="0.5" height="15.0" fill="rgb(220,226,29)" rx="2" ry="2" />
<text  x="590.06" y="159.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (2,772 samples, 42.23%)</title><rect x="691.7" y="277" width="498.3" height="15.0" fill="rgb(232,156,36)" rx="2" ry="2" />
<text  x="694.68" y="287.5" >std::thread::local::LocalKey&lt;T&gt;::with</text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (24 samples, 0.37%)</title><rect x="869.5" y="197" width="4.3" height="15.0" fill="rgb(218,175,24)" rx="2" ry="2" />
<text  x="872.47" y="207.5" ></text>
</g>
<g >
<title>tokio::park::thread::CachedParkThread::block_on (2,145 samples, 32.68%)</title><rect x="19.7" y="469" width="385.6" height="15.0" fill="rgb(234,130,8)" rx="2" ry="2" />
<text  x="22.71" y="479.5" >tokio::park::thread::CachedParkThread::block_on</text>
</g>
<g >
<title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="44.2" y="373" width="0.1" height="15.0" fill="rgb(243,51,34)" rx="2" ry="2" />
<text  x="47.16" y="383.5" ></text>
</g>
<g >
<title>mio::waker::Waker::wake (1 samples, 0.02%)</title><rect x="668.1" y="261" width="0.2" height="15.0" fill="rgb(211,83,44)" rx="2" ry="2" />
<text  x="671.13" y="271.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (258 samples, 3.93%)</title><rect x="920.2" y="213" width="46.3" height="15.0" fill="rgb(214,161,53)" rx="2" ry="2" />
<text  x="923.17" y="223.5" >toki..</text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (2 samples, 0.03%)</title><rect x="650.0" y="213" width="0.3" height="15.0" fill="rgb(211,149,28)" rx="2" ry="2" />
<text  x="652.98" y="223.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h7243420d1d1561f4 (2 samples, 0.03%)</title><rect x="400.5" y="85" width="0.3" height="15.0" fill="rgb(218,59,10)" rx="2" ry="2" />
<text  x="403.46" y="95.5" ></text>
</g>
<g >
<title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (1 samples, 0.02%)</title><rect x="1168.1" y="229" width="0.1" height="15.0" fill="rgb(231,59,23)" rx="2" ry="2" />
<text  x="1171.07" y="239.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (11 samples, 0.17%)</title><rect x="11.8" y="197" width="2.0" height="15.0" fill="rgb(251,184,1)" rx="2" ry="2" />
<text  x="14.80" y="207.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (84 samples, 1.28%)</title><rect x="893.4" y="197" width="15.1" height="15.0" fill="rgb(226,65,7)" rx="2" ry="2" />
<text  x="896.38" y="207.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (54 samples, 0.82%)</title><rect x="10.0" y="389" width="9.7" height="15.0" fill="rgb(225,170,47)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (7 samples, 0.11%)</title><rect x="1111.8" y="213" width="1.3" height="15.0" fill="rgb(234,160,13)" rx="2" ry="2" />
<text  x="1114.80" y="223.5" ></text>
</g>
<g >
<title>futures_task::waker::wake_by_ref_arc_raw (5 samples, 0.08%)</title><rect x="174.3" y="341" width="0.9" height="15.0" fill="rgb(212,222,39)" rx="2" ry="2" />
<text  x="177.31" y="351.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::parse_with (4 samples, 0.06%)</title><rect x="400.3" y="357" width="0.7" height="15.0" fill="rgb(218,192,17)" rx="2" ry="2" />
<text  x="403.28" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_idle (31 samples, 0.47%)</title><rect x="1168.2" y="245" width="5.6" height="15.0" fill="rgb(210,200,3)" rx="2" ry="2" />
<text  x="1171.25" y="255.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (24 samples, 0.37%)</title><rect x="1032.3" y="101" width="4.4" height="15.0" fill="rgb(229,134,53)" rx="2" ry="2" />
<text  x="1035.34" y="111.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (5 samples, 0.08%)</title><rect x="667.2" y="213" width="0.9" height="15.0" fill="rgb(209,18,37)" rx="2" ry="2" />
<text  x="670.23" y="223.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (3 samples, 0.05%)</title><rect x="598.4" y="197" width="0.5" height="15.0" fill="rgb(242,56,10)" rx="2" ry="2" />
<text  x="601.38" y="207.5" ></text>
</g>
<g >
<title>std::sys_common::net::TcpStream::read (273 samples, 4.16%)</title><rect x="990.1" y="165" width="49.1" height="15.0" fill="rgb(242,154,31)" rx="2" ry="2" />
<text  x="993.10" y="175.5" >std:..</text>
</g>
<g >
<title>tokio::coop::RestoreOnPending::made_progress (2 samples, 0.03%)</title><rect x="198.0" y="341" width="0.4" height="15.0" fill="rgb(231,20,45)" rx="2" ry="2" />
<text  x="201.04" y="351.5" ></text>
</g>
<g >
<title>std::time::Instant::elapsed (2 samples, 0.03%)</title><rect x="650.5" y="213" width="0.4" height="15.0" fill="rgb(228,155,26)" rx="2" ry="2" />
<text  x="653.51" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.02%)</title><rect x="1150.8" y="229" width="0.2" height="15.0" fill="rgb(215,185,38)" rx="2" ry="2" />
<text  x="1153.81" y="239.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_port (1 samples, 0.02%)</title><rect x="400.8" y="261" width="0.2" height="15.0" fill="rgb(254,44,1)" rx="2" ry="2" />
<text  x="403.82" y="271.5" ></text>
</g>
<g >
<title>std::time::Instant::now (2 samples, 0.03%)</title><rect x="650.5" y="197" width="0.4" height="15.0" fill="rgb(211,114,13)" rx="2" ry="2" />
<text  x="653.51" y="207.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::wait_until_internal (275 samples, 4.19%)</title><rect x="598.9" y="261" width="49.5" height="15.0" fill="rgb(217,212,8)" rx="2" ry="2" />
<text  x="601.92" y="271.5" >park..</text>
</g>
<g >
<title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (143 samples, 2.18%)</title><rect x="573.2" y="261" width="25.7" height="15.0" fill="rgb(244,188,21)" rx="2" ry="2" />
<text  x="576.21" y="271.5" >&lt;..</text>
</g>
<g >
<title>std::panicking::try (54 samples, 0.82%)</title><rect x="10.0" y="373" width="9.7" height="15.0" fill="rgb(230,221,32)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.06%)</title><rect x="13.1" y="181" width="0.7" height="15.0" fill="rgb(249,9,48)" rx="2" ry="2" />
<text  x="16.06" y="191.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_char::_$u7b$$u7b$closure$u7d$$u7d$::h1446e748816e0e18 (1 samples, 0.02%)</title><rect x="400.6" y="37" width="0.2" height="15.0" fill="rgb(222,112,11)" rx="2" ry="2" />
<text  x="403.64" y="47.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (193 samples, 2.94%)</title><rect x="1039.2" y="197" width="34.7" height="15.0" fill="rgb(246,81,29)" rx="2" ry="2" />
<text  x="1042.17" y="207.5" >to..</text>
</g>
<g >
<title>_start (54 samples, 0.82%)</title><rect x="10.0" y="517" width="9.7" height="15.0" fill="rgb(237,76,48)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.02%)</title><rect x="1167.9" y="229" width="0.2" height="15.0" fill="rgb(253,203,21)" rx="2" ry="2" />
<text  x="1170.89" y="239.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::ThreadPool::block_on (2,145 samples, 32.68%)</title><rect x="19.7" y="485" width="385.6" height="15.0" fill="rgb(250,107,23)" rx="2" ry="2" />
<text  x="22.71" y="495.5" >tokio::runtime::thread_pool::ThreadPool::block_on</text>
</g>
<g >
<title>&lt;tokio::io::driver::registration::Registration as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="143.6" y="357" width="0.1" height="15.0" fill="rgb(220,119,37)" rx="2" ry="2" />
<text  x="146.57" y="367.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (2 samples, 0.03%)</title><rect x="677.8" y="245" width="0.4" height="15.0" fill="rgb(250,152,23)" rx="2" ry="2" />
<text  x="680.84" y="255.5" ></text>
</g>
<g >
<title>mio::poll::Poll::poll (4 samples, 0.06%)</title><rect x="649.3" y="213" width="0.7" height="15.0" fill="rgb(240,61,54)" rx="2" ry="2" />
<text  x="652.26" y="223.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (12 samples, 0.18%)</title><rect x="668.3" y="277" width="2.2" height="15.0" fill="rgb(212,108,13)" rx="2" ry="2" />
<text  x="671.31" y="287.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::wait_until_internal (26 samples, 0.40%)</title><rect x="14.9" y="197" width="4.6" height="15.0" fill="rgb(217,53,11)" rx="2" ry="2" />
<text  x="17.85" y="207.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (2 samples, 0.03%)</title><rect x="400.5" y="101" width="0.3" height="15.0" fill="rgb(227,20,12)" rx="2" ry="2" />
<text  x="403.46" y="111.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Context::run_task (2,998 samples, 45.67%)</title><rect x="651.1" y="293" width="538.9" height="15.0" fill="rgb(240,208,49)" rx="2" ry="2" />
<text  x="654.05" y="303.5" >tokio::runtime::thread_pool::worker::Context::run_task</text>
</g>
<g >
<title>_int_free (1 samples, 0.02%)</title><rect x="893.0" y="197" width="0.2" height="15.0" fill="rgb(209,78,14)" rx="2" ry="2" />
<text  x="896.02" y="207.5" ></text>
</g>
<g >
<title>mio::event::event::Event::token (2 samples, 0.03%)</title><rect x="579.9" y="213" width="0.3" height="15.0" fill="rgb(253,41,28)" rx="2" ry="2" />
<text  x="582.87" y="223.5" ></text>
</g>
<g >
<title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="403.7" y="325" width="0.2" height="15.0" fill="rgb(243,32,9)" rx="2" ry="2" />
<text  x="406.69" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (2 samples, 0.03%)</title><rect x="293.0" y="277" width="0.3" height="15.0" fill="rgb(248,84,33)" rx="2" ry="2" />
<text  x="295.96" y="287.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (2 samples, 0.03%)</title><rect x="677.8" y="213" width="0.4" height="15.0" fill="rgb(245,122,6)" rx="2" ry="2" />
<text  x="680.84" y="223.5" ></text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (9 samples, 0.14%)</title><rect x="590.3" y="197" width="1.6" height="15.0" fill="rgb(237,186,36)" rx="2" ry="2" />
<text  x="593.29" y="207.5" ></text>
</g>
<g >
<title>tokio::runtime::context::io_handle (1 samples, 0.02%)</title><rect x="401.4" y="357" width="0.1" height="15.0" fill="rgb(214,10,46)" rx="2" ry="2" />
<text  x="404.36" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Shared::schedule (7 samples, 0.11%)</title><rect x="403.2" y="357" width="1.2" height="15.0" fill="rgb(248,50,30)" rx="2" ry="2" />
<text  x="406.15" y="367.5" ></text>
</g>
<g >
<title>tokio::sync::task::atomic_waker::AtomicWaker::wake (76 samples, 1.16%)</title><rect x="966.5" y="213" width="13.7" height="15.0" fill="rgb(249,146,2)" rx="2" ry="2" />
<text  x="969.55" y="223.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.03%)</title><rect x="587.6" y="85" width="0.4" height="15.0" fill="rgb(246,133,29)" rx="2" ry="2" />
<text  x="590.60" y="95.5" ></text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.02%)</title><rect x="358.4" y="357" width="0.2" height="15.0" fill="rgb(249,216,23)" rx="2" ry="2" />
<text  x="361.39" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::drop_join_handle_fast (1 samples, 0.02%)</title><rect x="401.5" y="389" width="0.2" height="15.0" fill="rgb(218,121,17)" rx="2" ry="2" />
<text  x="404.54" y="399.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1 samples, 0.02%)</title><rect x="917.8" y="101" width="0.2" height="15.0" fill="rgb(239,222,13)" rx="2" ry="2" />
<text  x="920.83" y="111.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_inc (19 samples, 0.29%)</title><rect x="866.1" y="181" width="3.4" height="15.0" fill="rgb(206,39,22)" rx="2" ry="2" />
<text  x="869.06" y="191.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::chan::channel (5 samples, 0.08%)</title><rect x="402.1" y="389" width="0.9" height="15.0" fill="rgb(218,167,0)" rx="2" ry="2" />
<text  x="405.07" y="399.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (3 samples, 0.05%)</title><rect x="174.7" y="325" width="0.5" height="15.0" fill="rgb(238,166,38)" rx="2" ry="2" />
<text  x="177.67" y="335.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.09%)</title><rect x="143.4" y="373" width="1.1" height="15.0" fill="rgb(214,196,46)" rx="2" ry="2" />
<text  x="146.39" y="383.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (49 samples, 0.75%)</title><rect x="271.0" y="261" width="8.8" height="15.0" fill="rgb(210,187,23)" rx="2" ry="2" />
<text  x="274.02" y="271.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (5 samples, 0.08%)</title><rect x="582.7" y="181" width="0.9" height="15.0" fill="rgb(250,0,1)" rx="2" ry="2" />
<text  x="585.74" y="191.5" ></text>
</g>
<g >
<title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::deregister (2 samples, 0.03%)</title><rect x="144.1" y="325" width="0.4" height="15.0" fill="rgb(246,110,16)" rx="2" ry="2" />
<text  x="147.11" y="335.5" ></text>
</g>
<g >
<title>&lt;tokio::time::driver::TimerUnpark&lt;P&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.03%)</title><rect x="670.5" y="277" width="0.3" height="15.0" fill="rgb(214,174,48)" rx="2" ry="2" />
<text  x="673.47" y="287.5" ></text>
</g>
<g >
<title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (153 samples, 2.33%)</title><rect x="252.3" y="277" width="27.5" height="15.0" fill="rgb(244,229,20)" rx="2" ry="2" />
<text  x="255.33" y="287.5" >t..</text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.02%)</title><rect x="586.5" y="181" width="0.2" height="15.0" fill="rgb(229,218,47)" rx="2" ry="2" />
<text  x="589.52" y="191.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="250.5" y="261" width="0.2" height="15.0" fill="rgb(240,16,20)" rx="2" ry="2" />
<text  x="253.53" y="271.5" ></text>
</g>
<g >
<title>start_thread (4,365 samples, 66.50%)</title><rect x="405.3" y="501" width="784.7" height="15.0" fill="rgb(210,99,8)" rx="2" ry="2" />
<text  x="408.31" y="511.5" >start_thread</text>
</g>
<g >
<title>futures_task::waker::drop_arc_raw (16 samples, 0.24%)</title><rect x="394.7" y="357" width="2.9" height="15.0" fill="rgb(208,13,54)" rx="2" ry="2" />
<text  x="397.70" y="367.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (54 samples, 0.82%)</title><rect x="10.0" y="341" width="9.7" height="15.0" fill="rgb(224,175,2)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.02%)</title><rect x="401.7" y="389" width="0.2" height="15.0" fill="rgb(248,45,10)" rx="2" ry="2" />
<text  x="404.72" y="399.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_separator::_$u7b$$u7b$closure$u7d$$u7d$::h63f18c552430d528 (2 samples, 0.03%)</title><rect x="400.5" y="181" width="0.3" height="15.0" fill="rgb(214,194,28)" rx="2" ry="2" />
<text  x="403.46" y="191.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1 samples, 0.02%)</title><rect x="403.7" y="277" width="0.2" height="15.0" fill="rgb(210,107,44)" rx="2" ry="2" />
<text  x="406.69" y="287.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.09%)</title><rect x="593.5" y="133" width="1.1" height="15.0" fill="rgb(210,4,17)" rx="2" ry="2" />
<text  x="596.53" y="143.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.24%)</title><rect x="172.7" y="357" width="2.9" height="15.0" fill="rgb(244,119,0)" rx="2" ry="2" />
<text  x="175.69" y="367.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (9 samples, 0.14%)</title><rect x="593.0" y="165" width="1.6" height="15.0" fill="rgb(212,10,0)" rx="2" ry="2" />
<text  x="595.99" y="175.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.02%)</title><rect x="143.2" y="373" width="0.2" height="15.0" fill="rgb(248,218,41)" rx="2" ry="2" />
<text  x="146.21" y="383.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1 samples, 0.02%)</title><rect x="250.5" y="229" width="0.2" height="15.0" fill="rgb(213,147,0)" rx="2" ry="2" />
<text  x="253.53" y="239.5" ></text>
</g>
<g >
<title>tokio::util::slab::Allocator&lt;T&gt;::allocate (1 samples, 0.02%)</title><rect x="401.2" y="325" width="0.2" height="15.0" fill="rgb(208,33,0)" rx="2" ry="2" />
<text  x="404.18" y="335.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="404.2" y="341" width="0.2" height="15.0" fill="rgb(253,131,7)" rx="2" ry="2" />
<text  x="407.23" y="351.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (1 samples, 0.02%)</title><rect x="400.8" y="197" width="0.2" height="15.0" fill="rgb(218,207,29)" rx="2" ry="2" />
<text  x="403.82" y="207.5" ></text>
</g>
<g >
<title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (31 samples, 0.47%)</title><rect x="14.0" y="229" width="5.5" height="15.0" fill="rgb(230,33,37)" rx="2" ry="2" />
<text  x="16.95" y="239.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,365 samples, 66.50%)</title><rect x="405.3" y="421" width="784.7" height="15.0" fill="rgb(214,178,32)" rx="2" ry="2" />
<text  x="408.31" y="431.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="668.0" y="181" width="0.1" height="15.0" fill="rgb(215,140,35)" rx="2" ry="2" />
<text  x="670.95" y="191.5" ></text>
</g>
<g >
<title>__GI___socket (1 samples, 0.02%)</title><rect x="399.0" y="373" width="0.2" height="15.0" fill="rgb(207,140,33)" rx="2" ry="2" />
<text  x="402.02" y="383.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (2 samples, 0.03%)</title><rect x="400.5" y="133" width="0.3" height="15.0" fill="rgb(226,126,19)" rx="2" ry="2" />
<text  x="403.46" y="143.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (5 samples, 0.08%)</title><rect x="397.6" y="373" width="0.9" height="15.0" fill="rgb(221,60,20)" rx="2" ry="2" />
<text  x="400.58" y="383.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tcp_aggregation::BufferedSource&gt;&gt; (7 samples, 0.11%)</title><rect x="143.2" y="389" width="1.3" height="15.0" fill="rgb(239,55,22)" rx="2" ry="2" />
<text  x="146.21" y="399.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::block::is_ready (5 samples, 0.08%)</title><rect x="340.4" y="325" width="0.9" height="15.0" fill="rgb(229,95,22)" rx="2" ry="2" />
<text  x="343.41" y="335.5" ></text>
</g>
<g >
<title>__libc_connect (5 samples, 0.08%)</title><rect x="399.4" y="357" width="0.9" height="15.0" fill="rgb(252,95,1)" rx="2" ry="2" />
<text  x="402.38" y="367.5" ></text>
</g>
<g >
<title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.06%)</title><rect x="143.7" y="357" width="0.8" height="15.0" fill="rgb(228,6,28)" rx="2" ry="2" />
<text  x="146.75" y="367.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_ipv4_addr::_$u7b$$u7b$closure$u7d$$u7d$::h3ffcfbe29c02a0f7 (3 samples, 0.05%)</title><rect x="400.3" y="229" width="0.5" height="15.0" fill="rgb(253,147,0)" rx="2" ry="2" />
<text  x="403.28" y="239.5" ></text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (1 samples, 0.02%)</title><rect x="175.4" y="341" width="0.2" height="15.0" fill="rgb(251,160,4)" rx="2" ry="2" />
<text  x="178.39" y="351.5" ></text>
</g>
<g >
<title>tokio::runtime::blocking::pool::Inner::run (4,365 samples, 66.50%)</title><rect x="405.3" y="405" width="784.7" height="15.0" fill="rgb(211,133,50)" rx="2" ry="2" />
<text  x="408.31" y="415.5" >tokio::runtime::blocking::pool::Inner::run</text>
</g>
<g >
<title>std::time::Instant::now (19 samples, 0.29%)</title><rect x="681.8" y="261" width="3.4" height="15.0" fill="rgb(243,73,54)" rx="2" ry="2" />
<text  x="684.79" y="271.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="403.7" y="261" width="0.2" height="15.0" fill="rgb(237,116,24)" rx="2" ry="2" />
<text  x="406.69" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (201 samples, 3.06%)</title><rect x="1114.3" y="213" width="36.2" height="15.0" fill="rgb(246,24,15)" rx="2" ry="2" />
<text  x="1117.32" y="223.5" >_in..</text>
</g>
<g >
<title>tokio::runtime::Runtime::block_on (2,145 samples, 32.68%)</title><rect x="19.7" y="501" width="385.6" height="15.0" fill="rgb(232,174,30)" rx="2" ry="2" />
<text  x="22.71" y="511.5" >tokio::runtime::Runtime::block_on</text>
</g>
<g >
<title>std::panicking::try::do_call (54 samples, 0.82%)</title><rect x="10.0" y="421" width="9.7" height="15.0" fill="rgb(244,85,35)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (4,365 samples, 66.50%)</title><rect x="405.3" y="325" width="784.7" height="15.0" fill="rgb(213,7,9)" rx="2" ry="2" />
<text  x="408.31" y="335.5" >tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (8 samples, 0.12%)</title><rect x="596.8" y="213" width="1.4" height="15.0" fill="rgb(229,89,44)" rx="2" ry="2" />
<text  x="599.76" y="223.5" ></text>
</g>
<g >
<title>tokio::util::slab::Address::from_usize (1 samples, 0.02%)</title><rect x="402.8" y="373" width="0.2" height="15.0" fill="rgb(211,155,26)" rx="2" ry="2" />
<text  x="405.79" y="383.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_running (77 samples, 1.17%)</title><rect x="1173.8" y="245" width="13.9" height="15.0" fill="rgb(205,6,16)" rx="2" ry="2" />
<text  x="1176.82" y="255.5" ></text>
</g>
<g >
<title>tokio::util::rand::thread_rng_n (5 samples, 0.08%)</title><rect x="404.4" y="389" width="0.9" height="15.0" fill="rgb(218,218,13)" rx="2" ry="2" />
<text  x="407.41" y="399.5" ></text>
</g>
<g >
<title>__GI_epoll_ctl (2 samples, 0.03%)</title><rect x="144.1" y="309" width="0.4" height="15.0" fill="rgb(229,101,31)" rx="2" ry="2" />
<text  x="147.11" y="319.5" ></text>
</g>
<g >
<title>mio::sys::unix::waker::eventfd::Waker::wake (7 samples, 0.11%)</title><rect x="666.9" y="261" width="1.2" height="15.0" fill="rgb(207,195,26)" rx="2" ry="2" />
<text  x="669.87" y="271.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,000 samples, 15.23%)</title><rect x="163.5" y="373" width="179.8" height="15.0" fill="rgb(208,217,14)" rx="2" ry="2" />
<text  x="166.52" y="383.5" >&lt;core::future::from_gen..</text>
</g>
<g >
<title>&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (1 samples, 0.02%)</title><rect x="678.2" y="261" width="0.2" height="15.0" fill="rgb(211,45,41)" rx="2" ry="2" />
<text  x="681.20" y="271.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::write (5 samples, 0.08%)</title><rect x="667.2" y="229" width="0.9" height="15.0" fill="rgb(206,46,54)" rx="2" ry="2" />
<text  x="670.23" y="239.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (9 samples, 0.14%)</title><rect x="586.5" y="197" width="1.6" height="15.0" fill="rgb(243,191,50)" rx="2" ry="2" />
<text  x="589.52" y="207.5" ></text>
</g>
<g >
<title>alloc::string::String::with_capacity (1 samples, 0.02%)</title><rect x="142.1" y="373" width="0.2" height="15.0" fill="rgb(208,158,27)" rx="2" ry="2" />
<text  x="145.13" y="383.5" ></text>
</g>
<g >
<title>core::tuple::&lt;impl core::cmp::Ord for  (2 samples, 0.03%)</title><rect x="677.8" y="229" width="0.4" height="15.0" fill="rgb(217,38,39)" rx="2" ry="2" />
<text  x="680.84" y="239.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (1 samples, 0.02%)</title><rect x="400.8" y="245" width="0.2" height="15.0" fill="rgb(232,114,6)" rx="2" ry="2" />
<text  x="403.82" y="255.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (54 samples, 0.82%)</title><rect x="10.0" y="309" width="9.7" height="15.0" fill="rgb(250,61,43)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>tokio::task::spawn::spawn (8 samples, 0.12%)</title><rect x="403.0" y="389" width="1.4" height="15.0" fill="rgb(216,5,42)" rx="2" ry="2" />
<text  x="405.97" y="399.5" ></text>
</g>
<g >
<title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (1 samples, 0.02%)</title><rect x="403.0" y="357" width="0.2" height="15.0" fill="rgb(247,191,7)" rx="2" ry="2" />
<text  x="405.97" y="367.5" ></text>
</g>
<g >
<title>mio::net::tcp::stream::TcpStream::connect (7 samples, 0.11%)</title><rect x="399.0" y="389" width="1.3" height="15.0" fill="rgb(253,180,22)" rx="2" ry="2" />
<text  x="402.02" y="399.5" ></text>
</g>
<g >
<title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="958.6" y="197" width="0.6" height="15.0" fill="rgb(247,143,8)" rx="2" ry="2" />
<text  x="961.64" y="207.5" ></text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (3 samples, 0.05%)</title><rect x="698.5" y="261" width="0.6" height="15.0" fill="rgb(225,69,16)" rx="2" ry="2" />
<text  x="701.51" y="271.5" ></text>
</g>
<g >
<title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (38 samples, 0.58%)</title><rect x="542.8" y="293" width="6.9" height="15.0" fill="rgb(229,215,20)" rx="2" ry="2" />
<text  x="545.83" y="303.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (48 samples, 0.73%)</title><rect x="133.5" y="389" width="8.6" height="15.0" fill="rgb(206,134,24)" rx="2" ry="2" />
<text  x="136.50" y="399.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::release (40 samples, 0.61%)</title><rect x="1158.9" y="229" width="7.2" height="15.0" fill="rgb(213,83,46)" rx="2" ry="2" />
<text  x="1161.90" y="239.5" ></text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (4 samples, 0.06%)</title><rect x="864.6" y="197" width="0.7" height="15.0" fill="rgb(216,130,12)" rx="2" ry="2" />
<text  x="867.62" y="207.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$core..future..from_generator..GenFuture$LT$tokio..sync..mpsc..bounded..Sender$LT$core..option..Option$LT$bytes..bytes..Bytes$GT$$GT$..send..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$::he952984a43c093e8 (8 samples, 0.12%)</title><rect x="1151.0" y="229" width="1.4" height="15.0" fill="rgb(247,46,26)" rx="2" ry="2" />
<text  x="1153.99" y="239.5" ></text>
</g>
<g >
<title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="250.5" y="277" width="0.2" height="15.0" fill="rgb(214,99,40)" rx="2" ry="2" />
<text  x="253.53" y="287.5" ></text>
</g>
<g >
<title>tcp_aggregation::main (2,145 samples, 32.68%)</title><rect x="19.7" y="517" width="385.6" height="15.0" fill="rgb(223,6,5)" rx="2" ry="2" />
<text  x="22.71" y="527.5" >tcp_aggregation::main</text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (23 samples, 0.35%)</title><rect x="1069.7" y="181" width="4.2" height="15.0" fill="rgb(229,122,41)" rx="2" ry="2" />
<text  x="1072.73" y="191.5" ></text>
</g>
<g >
<title>tokio::park::thread::drop_waker (1 samples, 0.02%)</title><rect x="11.6" y="165" width="0.2" height="15.0" fill="rgb(253,32,52)" rx="2" ry="2" />
<text  x="14.62" y="175.5" ></text>
</g>
<g >
<title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (617 samples, 9.40%)</title><rect x="762.9" y="213" width="110.9" height="15.0" fill="rgb(248,80,54)" rx="2" ry="2" />
<text  x="765.87" y="223.5" >&lt;tokio::sync:..</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="70.9" y="373" width="0.2" height="15.0" fill="rgb(220,227,39)" rx="2" ry="2" />
<text  x="73.94" y="383.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="249.5" y="277" width="0.1" height="15.0" fill="rgb(242,39,28)" rx="2" ry="2" />
<text  x="252.45" y="287.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.03%)</title><rect x="650.5" y="133" width="0.4" height="15.0" fill="rgb(206,78,14)" rx="2" ry="2" />
<text  x="653.51" y="143.5" ></text>
</g>
<g >
<title>syscall (3 samples, 0.05%)</title><rect x="918.0" y="149" width="0.5" height="15.0" fill="rgb(206,41,51)" rx="2" ry="2" />
<text  x="921.01" y="159.5" ></text>
</g>
<g >
<title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="917.8" y="149" width="0.2" height="15.0" fill="rgb(253,21,46)" rx="2" ry="2" />
<text  x="920.83" y="159.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$$u5b$core..option..Option$LT$core..task..wake..Waker$GT$$u3b$$u20$32$u5d$$GT$::hdc1a76692e228511 (4 samples, 0.06%)</title><rect x="596.0" y="213" width="0.8" height="15.0" fill="rgb(206,56,4)" rx="2" ry="2" />
<text  x="599.05" y="223.5" ></text>
</g>
<g >
<title>core::char::methods::&lt;impl char&gt;::to_digit (1 samples, 0.02%)</title><rect x="400.5" y="69" width="0.1" height="15.0" fill="rgb(209,74,0)" rx="2" ry="2" />
<text  x="403.46" y="79.5" ></text>
</g>
<g >
<title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.05%)</title><rect x="250.0" y="277" width="0.5" height="15.0" fill="rgb(245,20,30)" rx="2" ry="2" />
<text  x="252.99" y="287.5" ></text>
</g>
<g >
<title>std::net::parser::_$LT$impl$u20$core..str..traits..FromStr$u20$for$u20$std..net..addr..SocketAddr$GT$::from_str::_$u7b$$u7b$closure$u7d$$u7d$::hfe67c138790cc2aa (4 samples, 0.06%)</title><rect x="400.3" y="341" width="0.7" height="15.0" fill="rgb(249,174,15)" rx="2" ry="2" />
<text  x="403.28" y="351.5" ></text>
</g>
<g >
<title>tokio::park::thread::wake (8 samples, 0.12%)</title><rect x="586.7" y="181" width="1.4" height="15.0" fill="rgb(231,101,54)" rx="2" ry="2" />
<text  x="589.70" y="191.5" ></text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="400.6" y="53" width="0.2" height="15.0" fill="rgb(205,5,39)" rx="2" ry="2" />
<text  x="403.64" y="63.5" ></text>
</g>
<g >
<title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="650.9" y="229" width="0.2" height="15.0" fill="rgb(233,86,53)" rx="2" ry="2" />
<text  x="653.87" y="239.5" ></text>
</g>
<g >
<title>_int_free (68 samples, 1.04%)</title><rect x="358.6" y="357" width="12.2" height="15.0" fill="rgb(206,169,23)" rx="2" ry="2" />
<text  x="361.57" y="367.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.06%)</title><rect x="403.5" y="341" width="0.7" height="15.0" fill="rgb(231,29,34)" rx="2" ry="2" />
<text  x="406.51" y="351.5" ></text>
</g>
<g >
<title>core::num::&lt;impl u32&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="400.5" y="53" width="0.1" height="15.0" fill="rgb(215,143,12)" rx="2" ry="2" />
<text  x="403.46" y="63.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::schedule (256 samples, 3.90%)</title><rect x="247.3" y="309" width="46.0" height="15.0" fill="rgb(236,65,35)" rx="2" ry="2" />
<text  x="250.29" y="319.5" >toki..</text>
</g>
<g >
<title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4,365 samples, 66.50%)</title><rect x="405.3" y="453" width="784.7" height="15.0" fill="rgb(244,188,32)" rx="2" ry="2" />
<text  x="408.31" y="463.5" >&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text>
</g>
<g >
<title>__vdso_clock_gettime (11 samples, 0.17%)</title><rect x="683.2" y="197" width="2.0" height="15.0" fill="rgb(221,136,4)" rx="2" ry="2" />
<text  x="686.23" y="207.5" ></text>
</g>
<g >
<title>syscall (181 samples, 2.76%)</title><rect x="615.8" y="245" width="32.6" height="15.0" fill="rgb(224,170,39)" rx="2" ry="2" />
<text  x="618.82" y="255.5" >sy..</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="44.0" y="341" width="0.2" height="15.0" fill="rgb(210,148,30)" rx="2" ry="2" />
<text  x="46.98" y="351.5" ></text>
</g>
<g >
<title>std::sys::unix::time::Timespec::checked_add_duration (1 samples, 0.02%)</title><rect x="678.2" y="213" width="0.2" height="15.0" fill="rgb(223,203,9)" rx="2" ry="2" />
<text  x="681.20" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.02%)</title><rect x="142.0" y="373" width="0.1" height="15.0" fill="rgb(239,45,10)" rx="2" ry="2" />
<text  x="144.95" y="383.5" ></text>
</g>
<g >
<title>all (6,564 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(217,36,29)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (8 samples, 0.12%)</title><rect x="730.9" y="229" width="1.4" height="15.0" fill="rgb(211,135,18)" rx="2" ry="2" />
<text  x="733.87" y="239.5" ></text>
</g>
<g >
<title>tokio::coop::Budget::decrement (1 samples, 0.02%)</title><rect x="175.2" y="341" width="0.2" height="15.0" fill="rgb(226,212,1)" rx="2" ry="2" />
<text  x="178.21" y="351.5" ></text>
</g>
<g >
<title>__libc_write (5 samples, 0.08%)</title><rect x="667.2" y="197" width="0.9" height="15.0" fill="rgb(233,110,48)" rx="2" ry="2" />
<text  x="670.23" y="207.5" ></text>
</g>
<g >
<title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (2 samples, 0.03%)</title><rect x="678.4" y="261" width="0.3" height="15.0" fill="rgb(223,90,23)" rx="2" ry="2" />
<text  x="681.38" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="142.1" y="357" width="0.2" height="15.0" fill="rgb(233,177,4)" rx="2" ry="2" />
<text  x="145.13" y="367.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="250.5" y="213" width="0.2" height="15.0" fill="rgb(238,94,12)" rx="2" ry="2" />
<text  x="253.53" y="223.5" ></text>
</g>
<g >
<title>std::panicking::try (54 samples, 0.82%)</title><rect x="10.0" y="437" width="9.7" height="15.0" fill="rgb(217,43,47)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.05%)</title><rect x="11.3" y="181" width="0.5" height="15.0" fill="rgb(207,158,5)" rx="2" ry="2" />
<text  x="14.26" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (43 samples, 0.66%)</title><rect x="62.7" y="373" width="7.7" height="15.0" fill="rgb(247,142,24)" rx="2" ry="2" />
<text  x="65.67" y="383.5" ></text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.03%)</title><rect x="358.0" y="341" width="0.4" height="15.0" fill="rgb(247,84,54)" rx="2" ry="2" />
<text  x="361.03" y="351.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.03%)</title><rect x="403.9" y="325" width="0.3" height="15.0" fill="rgb(246,219,12)" rx="2" ry="2" />
<text  x="406.87" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (426 samples, 6.49%)</title><rect x="1073.9" y="229" width="76.6" height="15.0" fill="rgb(206,180,41)" rx="2" ry="2" />
<text  x="1076.87" y="239.5" >__GI___l..</text>
</g>
<g >
<title>tokio::runtime::task::raw::RawTask::from_raw (3 samples, 0.05%)</title><rect x="235.1" y="309" width="0.5" height="15.0" fill="rgb(206,176,54)" rx="2" ry="2" />
<text  x="238.07" y="319.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (14 samples, 0.21%)</title><rect x="1036.7" y="101" width="2.5" height="15.0" fill="rgb(247,138,5)" rx="2" ry="2" />
<text  x="1039.66" y="111.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="966.4" y="181" width="0.1" height="15.0" fill="rgb(214,36,32)" rx="2" ry="2" />
<text  x="969.37" y="191.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number::_$u7b$$u7b$closure$u7d$$u7d$::hf0d5c0f68048f7ef (1 samples, 0.02%)</title><rect x="400.8" y="181" width="0.2" height="15.0" fill="rgb(245,119,28)" rx="2" ry="2" />
<text  x="403.82" y="191.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (7 samples, 0.11%)</title><rect x="1113.1" y="213" width="1.2" height="15.0" fill="rgb(217,143,36)" rx="2" ry="2" />
<text  x="1116.06" y="223.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h7af2c173f35b9f21 (4,365 samples, 66.50%)</title><rect x="405.3" y="437" width="784.7" height="15.0" fill="rgb(228,156,13)" rx="2" ry="2" />
<text  x="408.31" y="447.5" >core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h7af2c173f35b9f21</text>
</g>
<g >
<title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (3 samples, 0.05%)</title><rect x="401.0" y="373" width="0.5" height="15.0" fill="rgb(223,46,22)" rx="2" ry="2" />
<text  x="404.00" y="383.5" ></text>
</g>
<g >
<title>__libc_enable_asynccancel (1 samples, 0.02%)</title><rect x="649.8" y="181" width="0.2" height="15.0" fill="rgb(217,52,48)" rx="2" ry="2" />
<text  x="652.80" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_notified_by_val (2 samples, 0.03%)</title><rect x="588.1" y="181" width="0.4" height="15.0" fill="rgb(232,154,11)" rx="2" ry="2" />
<text  x="591.14" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::ThreadPool::block_on (54 samples, 0.82%)</title><rect x="10.0" y="261" width="9.7" height="15.0" fill="rgb(214,153,54)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (2 samples, 0.03%)</title><rect x="587.6" y="133" width="0.4" height="15.0" fill="rgb(216,14,17)" rx="2" ry="2" />
<text  x="590.60" y="143.5" ></text>
</g>
<g >
<title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (11 samples, 0.17%)</title><rect x="341.3" y="341" width="2.0" height="15.0" fill="rgb(248,112,45)" rx="2" ry="2" />
<text  x="344.31" y="351.5" ></text>
</g>
<g >
<title>__rdl_dealloc (2 samples, 0.03%)</title><rect x="358.0" y="357" width="0.4" height="15.0" fill="rgb(229,17,16)" rx="2" ry="2" />
<text  x="361.03" y="367.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="142.1" y="261" width="0.2" height="15.0" fill="rgb(249,9,10)" rx="2" ry="2" />
<text  x="145.13" y="271.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::checked_add_duration (1 samples, 0.02%)</title><rect x="678.2" y="229" width="0.2" height="15.0" fill="rgb(213,155,34)" rx="2" ry="2" />
<text  x="681.20" y="239.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (10 samples, 0.15%)</title><rect x="590.1" y="213" width="1.8" height="15.0" fill="rgb(234,19,32)" rx="2" ry="2" />
<text  x="593.11" y="223.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::poll (4 samples, 0.06%)</title><rect x="598.2" y="213" width="0.7" height="15.0" fill="rgb(224,20,41)" rx="2" ry="2" />
<text  x="601.20" y="223.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,145 samples, 32.68%)</title><rect x="19.7" y="405" width="385.6" height="15.0" fill="rgb(242,109,43)" rx="2" ry="2" />
<text  x="22.71" y="415.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as core:..</text>
</g>
<g >
<title>parking_lot_core::parking_lot::lock_bucket_pair (17 samples, 0.26%)</title><rect x="678.7" y="261" width="3.1" height="15.0" fill="rgb(243,155,19)" rx="2" ry="2" />
<text  x="681.74" y="271.5" ></text>
</g>
<g >
<title>&lt; (112 samples, 1.71%)</title><rect x="177.9" y="341" width="20.1" height="15.0" fill="rgb(249,199,20)" rx="2" ry="2" />
<text  x="180.90" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="402.6" y="357" width="0.2" height="15.0" fill="rgb(231,129,35)" rx="2" ry="2" />
<text  x="405.61" y="367.5" ></text>
</g>
<g >
<title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (287 samples, 4.37%)</title><rect x="987.6" y="197" width="51.6" height="15.0" fill="rgb(220,66,30)" rx="2" ry="2" />
<text  x="990.58" y="207.5" >&lt;&amp;mio..</text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 0.06%)</title><rect x="1167.5" y="245" width="0.7" height="15.0" fill="rgb(239,220,13)" rx="2" ry="2" />
<text  x="1170.53" y="255.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_char (1 samples, 0.02%)</title><rect x="400.6" y="69" width="0.2" height="15.0" fill="rgb(228,16,43)" rx="2" ry="2" />
<text  x="403.64" y="79.5" ></text>
</g>
<g >
<title>parking_lot_core::word_lock::WordLock::lock_slow (1 samples, 0.02%)</title><rect x="542.7" y="277" width="0.1" height="15.0" fill="rgb(216,97,26)" rx="2" ry="2" />
<text  x="545.65" y="287.5" ></text>
</g>
<g >
<title>std::time::Instant::elapsed (9 samples, 0.14%)</title><rect x="593.0" y="213" width="1.6" height="15.0" fill="rgb(238,190,40)" rx="2" ry="2" />
<text  x="595.99" y="223.5" ></text>
</g>
<g >
<title>tokio::park::thread::CachedParkThread::block_on (54 samples, 0.82%)</title><rect x="10.0" y="245" width="9.7" height="15.0" fill="rgb(216,146,47)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (13 samples, 0.20%)</title><rect x="916.2" y="165" width="2.3" height="15.0" fill="rgb(247,175,10)" rx="2" ry="2" />
<text  x="919.21" y="175.5" ></text>
</g>
<g >
<title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (10 samples, 0.15%)</title><rect x="649.3" y="261" width="1.8" height="15.0" fill="rgb(231,223,51)" rx="2" ry="2" />
<text  x="652.26" y="271.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (3 samples, 0.05%)</title><rect x="400.3" y="245" width="0.5" height="15.0" fill="rgb(224,187,31)" rx="2" ry="2" />
<text  x="403.28" y="255.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_socket_addr_v4 (4 samples, 0.06%)</title><rect x="400.3" y="309" width="0.7" height="15.0" fill="rgb(212,33,44)" rx="2" ry="2" />
<text  x="403.28" y="319.5" ></text>
</g>
<g >
<title>__GI___sched_yield (1 samples, 0.02%)</title><rect x="542.5" y="277" width="0.2" height="15.0" fill="rgb(238,171,13)" rx="2" ry="2" />
<text  x="545.47" y="287.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (54 samples, 0.82%)</title><rect x="10.0" y="453" width="9.7" height="15.0" fill="rgb(208,194,26)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (4,365 samples, 66.50%)</title><rect x="405.3" y="373" width="784.7" height="15.0" fill="rgb(229,208,34)" rx="2" ry="2" />
<text  x="408.31" y="383.5" >&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;</text>
</g>
<g >
<title>std::sys::unix::time::inner::now (2 samples, 0.03%)</title><rect x="650.5" y="165" width="0.4" height="15.0" fill="rgb(240,84,17)" rx="2" ry="2" />
<text  x="653.51" y="175.5" ></text>
</g>
<g >
<title>syscall (35 samples, 0.53%)</title><rect x="685.2" y="261" width="6.3" height="15.0" fill="rgb(225,156,52)" rx="2" ry="2" />
<text  x="688.21" y="271.5" ></text>
</g>
<g >
<title>epoll_wait (4 samples, 0.06%)</title><rect x="649.3" y="197" width="0.7" height="15.0" fill="rgb(210,31,4)" rx="2" ry="2" />
<text  x="652.26" y="207.5" ></text>
</g>
<g >
<title>tokio::time::clock::Clock::now (14 samples, 0.21%)</title><rect x="592.1" y="229" width="2.5" height="15.0" fill="rgb(252,226,12)" rx="2" ry="2" />
<text  x="595.09" y="239.5" ></text>
</g>
<g >
<title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.02%)</title><rect x="650.3" y="229" width="0.2" height="15.0" fill="rgb(249,93,38)" rx="2" ry="2" />
<text  x="653.34" y="239.5" ></text>
</g>
<g >
<title>mio::event::event::Event::is_writable (2 samples, 0.03%)</title><rect x="579.5" y="213" width="0.4" height="15.0" fill="rgb(213,100,24)" rx="2" ry="2" />
<text  x="582.51" y="223.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (2 samples, 0.03%)</title><rect x="401.0" y="357" width="0.4" height="15.0" fill="rgb(217,200,30)" rx="2" ry="2" />
<text  x="404.00" y="367.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="917.8" y="133" width="0.2" height="15.0" fill="rgb(215,199,32)" rx="2" ry="2" />
<text  x="920.83" y="143.5" ></text>
</g>
<g >
<title>&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (4 samples, 0.06%)</title><rect x="11.1" y="197" width="0.7" height="15.0" fill="rgb(216,54,24)" rx="2" ry="2" />
<text  x="14.08" y="207.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,145 samples, 32.68%)</title><rect x="19.7" y="453" width="385.6" height="15.0" fill="rgb(231,98,29)" rx="2" ry="2" />
<text  x="22.71" y="463.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as core:..</text>
</g>
<g >
<title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="44.0" y="373" width="0.2" height="15.0" fill="rgb(247,51,7)" rx="2" ry="2" />
<text  x="46.98" y="383.5" ></text>
</g>
<g >
<title>__GI___clone (4,365 samples, 66.50%)</title><rect x="405.3" y="517" width="784.7" height="15.0" fill="rgb(226,153,38)" rx="2" ry="2" />
<text  x="408.31" y="527.5" >__GI___clone</text>
</g>
<g >
<title>futures_task::waker::clone_arc_raw (18 samples, 0.27%)</title><rect x="391.5" y="357" width="3.2" height="15.0" fill="rgb(238,114,21)" rx="2" ry="2" />
<text  x="394.47" y="367.5" ></text>
</g>
<g >
<title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.06%)</title><rect x="172.0" y="357" width="0.7" height="15.0" fill="rgb(230,86,6)" rx="2" ry="2" />
<text  x="174.97" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::run (4,365 samples, 66.50%)</title><rect x="405.3" y="341" width="784.7" height="15.0" fill="rgb(241,209,20)" rx="2" ry="2" />
<text  x="408.31" y="351.5" >tokio::runtime::thread_pool::worker::run</text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="670.3" y="261" width="0.2" height="15.0" fill="rgb(247,104,43)" rx="2" ry="2" />
<text  x="673.29" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="142.1" y="293" width="0.2" height="15.0" fill="rgb(217,71,2)" rx="2" ry="2" />
<text  x="145.13" y="303.5" ></text>
</g>
<g >
<title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.30%)</title><rect x="10.4" y="213" width="3.6" height="15.0" fill="rgb(251,166,28)" rx="2" ry="2" />
<text  x="13.36" y="223.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (3 samples, 0.05%)</title><rect x="131.7" y="373" width="0.5" height="15.0" fill="rgb(219,30,34)" rx="2" ry="2" />
<text  x="134.70" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_free (64 samples, 0.98%)</title><rect x="44.5" y="389" width="11.5" height="15.0" fill="rgb(237,30,7)" rx="2" ry="2" />
<text  x="47.52" y="399.5" ></text>
</g>
<g >
<title>tokio::runtime::task::waker::clone_waker (23 samples, 0.35%)</title><rect x="865.3" y="197" width="4.2" height="15.0" fill="rgb(253,128,38)" rx="2" ry="2" />
<text  x="868.34" y="207.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_ipv4_addr::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hac54fcbd52b33254 (2 samples, 0.03%)</title><rect x="400.5" y="165" width="0.3" height="15.0" fill="rgb(214,180,10)" rx="2" ry="2" />
<text  x="403.46" y="175.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_port::_$u7b$$u7b$closure$u7d$$u7d$::h5071bcd790d33106 (1 samples, 0.02%)</title><rect x="400.8" y="229" width="0.2" height="15.0" fill="rgb(254,207,18)" rx="2" ry="2" />
<text  x="403.82" y="239.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (530 samples, 8.07%)</title><rect x="198.4" y="341" width="95.3" height="15.0" fill="rgb(235,57,11)" rx="2" ry="2" />
<text  x="201.40" y="351.5" >tokio::sync..</text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_notified_by_val (53 samples, 0.81%)</title><rect x="237.8" y="309" width="9.5" height="15.0" fill="rgb(248,227,27)" rx="2" ry="2" />
<text  x="240.77" y="319.5" ></text>
</g>
<g >
<title>std::net::parser::&lt;impl core::str::traits::FromStr for std::net::addr::SocketAddr&gt;::from_str (4 samples, 0.06%)</title><rect x="400.3" y="373" width="0.7" height="15.0" fill="rgb(234,42,35)" rx="2" ry="2" />
<text  x="403.28" y="383.5" ></text>
</g>
<g >
<title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.03%)</title><rect x="293.3" y="325" width="0.4" height="15.0" fill="rgb(249,209,49)" rx="2" ry="2" />
<text  x="296.32" y="335.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (115 samples, 1.75%)</title><rect x="670.8" y="277" width="20.7" height="15.0" fill="rgb(211,224,49)" rx="2" ry="2" />
<text  x="673.83" y="287.5" ></text>
</g>
<g >
<title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (7 samples, 0.11%)</title><rect x="666.9" y="245" width="1.2" height="15.0" fill="rgb(222,143,40)" rx="2" ry="2" />
<text  x="669.87" y="255.5" ></text>
</g>
<g >
<title>&lt;tokio::time::driver::TimerUnpark&lt;P&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.03%)</title><rect x="403.2" y="341" width="0.3" height="15.0" fill="rgb(251,172,45)" rx="2" ry="2" />
<text  x="406.15" y="351.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (19 samples, 0.29%)</title><rect x="681.8" y="229" width="3.4" height="15.0" fill="rgb(207,53,41)" rx="2" ry="2" />
<text  x="684.79" y="239.5" ></text>
</g>
<g >
<title>core::fmt::write (1 samples, 0.02%)</title><rect x="142.3" y="357" width="0.2" height="15.0" fill="rgb(222,102,38)" rx="2" ry="2" />
<text  x="145.31" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::Runtime::block_on (54 samples, 0.82%)</title><rect x="10.0" y="277" width="9.7" height="15.0" fill="rgb(229,1,24)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (9 samples, 0.14%)</title><rect x="873.8" y="213" width="1.6" height="15.0" fill="rgb(205,130,10)" rx="2" ry="2" />
<text  x="876.79" y="223.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="691.5" y="277" width="0.2" height="15.0" fill="rgb(216,223,20)" rx="2" ry="2" />
<text  x="694.50" y="287.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (15 samples, 0.23%)</title><rect x="648.4" y="277" width="2.7" height="15.0" fill="rgb(250,217,51)" rx="2" ry="2" />
<text  x="651.36" y="287.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (2 samples, 0.03%)</title><rect x="650.5" y="149" width="0.4" height="15.0" fill="rgb(218,35,37)" rx="2" ry="2" />
<text  x="653.51" y="159.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="142.1" y="277" width="0.2" height="15.0" fill="rgb(252,3,20)" rx="2" ry="2" />
<text  x="145.13" y="287.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_read_io (507 samples, 7.72%)</title><rect x="982.7" y="213" width="91.2" height="15.0" fill="rgb(222,133,15)" rx="2" ry="2" />
<text  x="985.73" y="223.5" >tokio::io:..</text>
</g>
<g >
<title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (280 samples, 4.27%)</title><rect x="988.8" y="181" width="50.4" height="15.0" fill="rgb(246,78,6)" rx="2" ry="2" />
<text  x="991.84" y="191.5" >&lt;&amp;std..</text>
</g>
<g >
<title>__libc_recv (272 samples, 4.14%)</title><rect x="990.3" y="117" width="48.9" height="15.0" fill="rgb(233,68,11)" rx="2" ry="2" />
<text  x="993.28" y="127.5" >__li..</text>
</g>
<g >
<title>std::sys::unix::time::inner::now (2 samples, 0.03%)</title><rect x="587.6" y="117" width="0.4" height="15.0" fill="rgb(229,91,24)" rx="2" ry="2" />
<text  x="590.60" y="127.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="44.2" y="389" width="0.1" height="15.0" fill="rgb(218,33,39)" rx="2" ry="2" />
<text  x="47.16" y="399.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (106 samples, 1.61%)</title><rect x="378.5" y="373" width="19.1" height="15.0" fill="rgb(228,64,25)" rx="2" ry="2" />
<text  x="381.53" y="383.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="250.5" y="245" width="0.2" height="15.0" fill="rgb(245,26,34)" rx="2" ry="2" />
<text  x="253.53" y="255.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::acquire (7 samples, 0.11%)</title><rect x="918.9" y="213" width="1.3" height="15.0" fill="rgb(250,145,24)" rx="2" ry="2" />
<text  x="921.91" y="223.5" ></text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (1 samples, 0.02%)</title><rect x="1069.6" y="181" width="0.1" height="15.0" fill="rgb(253,25,31)" rx="2" ry="2" />
<text  x="1072.56" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (330 samples, 5.03%)</title><rect x="234.0" y="325" width="59.3" height="15.0" fill="rgb(246,87,53)" rx="2" ry="2" />
<text  x="236.99" y="335.5" >tokio:..</text>
</g>
<g >
<title>tcp_aggregation::main (54 samples, 0.82%)</title><rect x="10.0" y="293" width="9.7" height="15.0" fill="rgb(207,159,6)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_separator (2 samples, 0.03%)</title><rect x="400.5" y="213" width="0.3" height="15.0" fill="rgb(210,37,23)" rx="2" ry="2" />
<text  x="403.46" y="223.5" ></text>
</g>
<g >
<title>tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for alloc::string::String&gt;::to_socket_addrs (4 samples, 0.06%)</title><rect x="400.3" y="389" width="0.7" height="15.0" fill="rgb(238,51,25)" rx="2" ry="2" />
<text  x="403.28" y="399.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (113 samples, 1.72%)</title><rect x="522.5" y="293" width="20.3" height="15.0" fill="rgb(227,181,21)" rx="2" ry="2" />
<text  x="525.52" y="303.5" ></text>
</g>
<g >
<title>tokio-runtime-w (4,365 samples, 66.50%)</title><rect x="405.3" y="533" width="784.7" height="15.0" fill="rgb(208,44,36)" rx="2" ry="2" />
<text  x="408.31" y="543.5" >tokio-runtime-w</text>
</g>
<g >
<title>tokio::signal::unix::driver::noop (1 samples, 0.02%)</title><rect x="591.9" y="213" width="0.2" height="15.0" fill="rgb(232,140,25)" rx="2" ry="2" />
<text  x="594.91" y="223.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="70.9" y="389" width="0.2" height="15.0" fill="rgb(210,124,52)" rx="2" ry="2" />
<text  x="73.94" y="399.5" ></text>
</g>
<g >
<title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4,365 samples, 66.50%)</title><rect x="405.3" y="357" width="784.7" height="15.0" fill="rgb(217,61,16)" rx="2" ry="2" />
<text  x="408.31" y="367.5" >tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text>
</g>
<g >
<title>__GI___clock_gettime (13 samples, 0.20%)</title><rect x="682.9" y="213" width="2.3" height="15.0" fill="rgb(226,128,38)" rx="2" ry="2" />
<text  x="685.87" y="223.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="588.0" y="149" width="0.1" height="15.0" fill="rgb(244,145,24)" rx="2" ry="2" />
<text  x="590.96" y="159.5" ></text>
</g>
<g >
<title>core::fmt::Write::write_fmt (1 samples, 0.02%)</title><rect x="142.3" y="373" width="0.2" height="15.0" fill="rgb(225,120,9)" rx="2" ry="2" />
<text  x="145.31" y="383.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (536 samples, 8.17%)</title><rect x="552.0" y="277" width="96.4" height="15.0" fill="rgb(235,58,34)" rx="2" ry="2" />
<text  x="555.00" y="287.5" >&lt;tokio::run..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="142.1" y="245" width="0.2" height="15.0" fill="rgb(211,47,37)" rx="2" ry="2" />
<text  x="145.13" y="255.5" ></text>
</g>
<g >
<title>epoll_wait (21 samples, 0.32%)</title><rect x="580.4" y="197" width="3.8" height="15.0" fill="rgb(236,141,19)" rx="2" ry="2" />
<text  x="583.41" y="207.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,718 samples, 41.41%)</title><rect x="699.1" y="261" width="488.6" height="15.0" fill="rgb(222,28,9)" rx="2" ry="2" />
<text  x="702.05" y="271.5" >tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="402.6" y="373" width="0.2" height="15.0" fill="rgb(215,191,43)" rx="2" ry="2" />
<text  x="405.61" y="383.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="142.1" y="341" width="0.2" height="15.0" fill="rgb(230,45,47)" rx="2" ry="2" />
<text  x="145.13" y="351.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (232 samples, 3.53%)</title><rect x="251.6" y="293" width="41.7" height="15.0" fill="rgb(234,130,20)" rx="2" ry="2" />
<text  x="254.61" y="303.5" >tok..</text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="403.7" y="309" width="0.2" height="15.0" fill="rgb(234,68,49)" rx="2" ry="2" />
<text  x="406.69" y="319.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::level::Level::next_expiration (2 samples, 0.03%)</title><rect x="598.6" y="181" width="0.3" height="15.0" fill="rgb(254,123,14)" rx="2" ry="2" />
<text  x="601.56" y="191.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (9 samples, 0.14%)</title><rect x="593.0" y="181" width="1.6" height="15.0" fill="rgb(233,202,41)" rx="2" ry="2" />
<text  x="595.99" y="191.5" ></text>
</g>
<g >
<title>__rdl_alloc (2 samples, 0.03%)</title><rect x="1150.5" y="229" width="0.3" height="15.0" fill="rgb(225,190,16)" rx="2" ry="2" />
<text  x="1153.45" y="239.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_socket_addr_v4::_$u7b$$u7b$closure$u7d$$u7d$::hc299aa0fc7215c63 (4 samples, 0.06%)</title><rect x="400.3" y="277" width="0.7" height="15.0" fill="rgb(253,86,28)" rx="2" ry="2" />
<text  x="403.28" y="287.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Context::park_timeout (564 samples, 8.59%)</title><rect x="549.7" y="293" width="101.4" height="15.0" fill="rgb(254,109,16)" rx="2" ry="2" />
<text  x="552.66" y="303.5" >tokio::runti..</text>
</g>
<g >
<title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (24 samples, 0.37%)</title><rect x="594.6" y="229" width="4.3" height="15.0" fill="rgb(213,44,13)" rx="2" ry="2" />
<text  x="597.61" y="239.5" ></text>
</g>
<g >
<title>tokio::net::tcp::stream::TcpStream::new (3 samples, 0.05%)</title><rect x="401.0" y="389" width="0.5" height="15.0" fill="rgb(211,155,42)" rx="2" ry="2" />
<text  x="404.00" y="399.5" ></text>
</g>
<g >
<title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (933 samples, 14.21%)</title><rect x="175.6" y="357" width="167.7" height="15.0" fill="rgb(211,100,48)" rx="2" ry="2" />
<text  x="178.57" y="367.5" >tokio::loom::std::uns..</text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4,365 samples, 66.50%)</title><rect x="405.3" y="389" width="784.7" height="15.0" fill="rgb(222,190,13)" rx="2" ry="2" />
<text  x="408.31" y="399.5" >tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text>
</g>
<g >
<title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (521 samples, 7.94%)</title><rect x="980.2" y="229" width="93.7" height="15.0" fill="rgb(217,9,2)" rx="2" ry="2" />
<text  x="983.21" y="239.5" >&lt;tokio::net..</text>
</g>
<g >
<title>main (54 samples, 0.82%)</title><rect x="10.0" y="485" width="9.7" height="15.0" fill="rgb(227,196,54)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>_int_free (346 samples, 5.27%)</title><rect x="71.3" y="389" width="62.2" height="15.0" fill="rgb(240,119,29)" rx="2" ry="2" />
<text  x="74.30" y="399.5" >_int_f..</text>
</g>
<g >
<title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.05%)</title><rect x="677.7" y="261" width="0.5" height="15.0" fill="rgb(251,117,40)" rx="2" ry="2" />
<text  x="680.66" y="271.5" ></text>
</g>
<g >
<title>mio::poll::Poll::poll (22 samples, 0.34%)</title><rect x="580.2" y="213" width="4.0" height="15.0" fill="rgb(213,135,14)" rx="2" ry="2" />
<text  x="583.23" y="223.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_socket_addr (4 samples, 0.06%)</title><rect x="400.3" y="325" width="0.7" height="15.0" fill="rgb(218,43,5)" rx="2" ry="2" />
<text  x="403.28" y="335.5" ></text>
</g>
<g >
<title>tcp-aggregation (2,199 samples, 33.50%)</title><rect x="10.0" y="533" width="395.3" height="15.0" fill="rgb(209,185,37)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >tcp-aggregation</text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="893.2" y="197" width="0.2" height="15.0" fill="rgb(219,119,40)" rx="2" ry="2" />
<text  x="896.20" y="207.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::level::Level::next_expiration (6 samples, 0.09%)</title><rect x="597.1" y="197" width="1.1" height="15.0" fill="rgb(225,73,37)" rx="2" ry="2" />
<text  x="600.12" y="207.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (2 samples, 0.03%)</title><rect x="588.1" y="197" width="0.4" height="15.0" fill="rgb(212,149,21)" rx="2" ry="2" />
<text  x="591.14" y="207.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="403.7" y="293" width="0.2" height="15.0" fill="rgb(236,34,19)" rx="2" ry="2" />
<text  x="406.69" y="303.5" ></text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (24 samples, 0.37%)</title><rect x="584.2" y="213" width="4.3" height="15.0" fill="rgb(247,89,0)" rx="2" ry="2" />
<text  x="587.18" y="223.5" ></text>
</g>
<g >
<title>tokio::runtime::task::raw::poll (13 samples, 0.20%)</title><rect x="1187.7" y="261" width="2.3" height="15.0" fill="rgb(224,139,35)" rx="2" ry="2" />
<text  x="1190.66" y="271.5" ></text>
</g>
<g >
<title>__rdl_alloc (3 samples, 0.05%)</title><rect x="70.4" y="389" width="0.5" height="15.0" fill="rgb(219,205,52)" rx="2" ry="2" />
<text  x="73.40" y="399.5" ></text>
</g>
<g >
<title>futures_task::waker::wake_by_ref_arc_raw (2 samples, 0.03%)</title><rect x="398.5" y="373" width="0.3" height="15.0" fill="rgb(249,218,9)" rx="2" ry="2" />
<text  x="401.48" y="383.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.32%)</title><rect x="10.2" y="229" width="3.8" height="15.0" fill="rgb(230,164,28)" rx="2" ry="2" />
<text  x="13.18" y="239.5" ></text>
</g>
<g >
<title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.05%)</title><rect x="917.3" y="149" width="0.5" height="15.0" fill="rgb(222,171,10)" rx="2" ry="2" />
<text  x="920.29" y="159.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (2,145 samples, 32.68%)</title><rect x="19.7" y="421" width="385.6" height="15.0" fill="rgb(224,37,29)" rx="2" ry="2" />
<text  x="22.71" y="431.5" >futures_util::stream::stream::StreamExt::poll_next_u..</text>
</g>
<g >
<title>bytes::bytes::promotable_even_drop (4 samples, 0.06%)</title><rect x="142.5" y="389" width="0.7" height="15.0" fill="rgb(245,98,12)" rx="2" ry="2" />
<text  x="145.49" y="399.5" ></text>
</g>
<g >
<title>__GI_epoll_ctl (1 samples, 0.02%)</title><rect x="401.0" y="309" width="0.2" height="15.0" fill="rgb(245,156,35)" rx="2" ry="2" />
<text  x="404.00" y="319.5" ></text>
</g>
<g >
<title>tokio::coop::Budget::initial (1 samples, 0.02%)</title><rect x="19.5" y="229" width="0.2" height="15.0" fill="rgb(222,72,13)" rx="2" ry="2" />
<text  x="22.53" y="239.5" ></text>
</g>
<g >
<title>futures_task::waker::wake_arc_raw (2 samples, 0.03%)</title><rect x="918.5" y="213" width="0.4" height="15.0" fill="rgb(246,23,6)" rx="2" ry="2" />
<text  x="921.55" y="223.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h9880c3f557b9ced0 (54 samples, 0.82%)</title><rect x="10.0" y="325" width="9.7" height="15.0" fill="rgb(252,94,54)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>&lt;tokio::net::addr::sealed::OneOrMore as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="44.3" y="389" width="0.2" height="15.0" fill="rgb(242,1,52)" rx="2" ry="2" />
<text  x="47.34" y="399.5" ></text>
</g>
<g >
<title>tokio::park::thread::Inner::park (30 samples, 0.46%)</title><rect x="14.1" y="213" width="5.4" height="15.0" fill="rgb(240,159,10)" rx="2" ry="2" />
<text  x="17.13" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (80 samples, 1.22%)</title><rect x="56.0" y="389" width="14.4" height="15.0" fill="rgb(212,74,37)" rx="2" ry="2" />
<text  x="59.02" y="399.5" ></text>
</g>
<g >
<title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (14 samples, 0.21%)</title><rect x="665.8" y="277" width="2.5" height="15.0" fill="rgb(228,82,14)" rx="2" ry="2" />
<text  x="668.80" y="287.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (2 samples, 0.03%)</title><rect x="650.5" y="181" width="0.4" height="15.0" fill="rgb(229,196,34)" rx="2" ry="2" />
<text  x="653.51" y="191.5" ></text>
</g>
<g >
<title>__libc_enable_asynccancel (3 samples, 0.05%)</title><rect x="583.6" y="181" width="0.6" height="15.0" fill="rgb(209,162,41)" rx="2" ry="2" />
<text  x="586.64" y="191.5" ></text>
</g>
<g >
<title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="340.1" y="325" width="0.3" height="15.0" fill="rgb(245,51,50)" rx="2" ry="2" />
<text  x="343.05" y="335.5" ></text>
</g>
<g >
<title>tokio::io::driver::Inner::add_source (2 samples, 0.03%)</title><rect x="401.0" y="341" width="0.4" height="15.0" fill="rgb(240,19,10)" rx="2" ry="2" />
<text  x="404.00" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main (54 samples, 0.82%)</title><rect x="10.0" y="501" width="9.7" height="15.0" fill="rgb(226,196,13)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (6 samples, 0.09%)</title><rect x="357.0" y="357" width="1.0" height="15.0" fill="rgb(222,40,33)" rx="2" ry="2" />
<text  x="359.95" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Context::run (4,365 samples, 66.50%)</title><rect x="405.3" y="309" width="784.7" height="15.0" fill="rgb(213,184,16)" rx="2" ry="2" />
<text  x="408.31" y="319.5" >tokio::runtime::thread_pool::worker::Context::run</text>
</g>
<g >
<title>tokio::park::thread::wake (19 samples, 0.29%)</title><rect x="915.1" y="181" width="3.4" height="15.0" fill="rgb(236,42,15)" rx="2" ry="2" />
<text  x="918.13" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_dec (12 samples, 0.18%)</title><rect x="235.6" y="309" width="2.2" height="15.0" fill="rgb(254,27,50)" rx="2" ry="2" />
<text  x="238.61" y="319.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (54 samples, 0.82%)</title><rect x="10.0" y="357" width="9.7" height="15.0" fill="rgb(227,143,49)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="44.0" y="357" width="0.2" height="15.0" fill="rgb(248,74,22)" rx="2" ry="2" />
<text  x="46.98" y="367.5" ></text>
</g>
<g >
<title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (7 samples, 0.11%)</title><rect x="588.5" y="229" width="1.3" height="15.0" fill="rgb(238,24,53)" rx="2" ry="2" />
<text  x="591.49" y="239.5" ></text>
</g>
</g>
</svg>
