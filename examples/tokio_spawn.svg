<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (523 samples, 8.07%)</title><rect x="154.9" y="421" width="95.2" height="15.0" fill="rgb(231,158,40)" rx="2" ry="2" />
<text  x="157.88" y="431.5" >&lt;tokio::run..</text>
</g>
<g >
<title>__GI___libc_malloc (546 samples, 8.42%)</title><rect x="1035.3" y="373" width="99.4" height="15.0" fill="rgb(228,68,28)" rx="2" ry="2" />
<text  x="1038.29" y="383.5" >__GI___libc_..</text>
</g>
<g >
<title>mio::sys::unix::tcp::connect (1 samples, 0.02%)</title><rect x="940.5" y="309" width="0.1" height="15.0" fill="rgb(246,170,34)" rx="2" ry="2" />
<text  x="943.46" y="319.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::level::Level::next_expiration (1 samples, 0.02%)</title><rect x="252.4" y="341" width="0.2" height="15.0" fill="rgb(209,111,26)" rx="2" ry="2" />
<text  x="255.44" y="351.5" ></text>
</g>
<g >
<title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (1 samples, 0.02%)</title><rect x="942.3" y="309" width="0.2" height="15.0" fill="rgb(251,222,20)" rx="2" ry="2" />
<text  x="945.28" y="319.5" ></text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (24 samples, 0.37%)</title><rect x="1030.9" y="325" width="4.4" height="15.0" fill="rgb(233,93,42)" rx="2" ry="2" />
<text  x="1033.92" y="335.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (863 samples, 13.31%)</title><rect x="731.9" y="309" width="157.0" height="15.0" fill="rgb(207,219,14)" rx="2" ry="2" />
<text  x="734.87" y="319.5" >&lt;core::future::from_..</text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (44 samples, 0.68%)</title><rect x="1138.3" y="373" width="8.0" height="15.0" fill="rgb(222,224,32)" rx="2" ry="2" />
<text  x="1141.31" y="383.5" ></text>
</g>
<g >
<title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (3 samples, 0.05%)</title><rect x="941.4" y="261" width="0.5" height="15.0" fill="rgb(221,47,34)" rx="2" ry="2" />
<text  x="944.37" y="271.5" ></text>
</g>
<g >
<title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="739.9" y="277" width="0.5" height="15.0" fill="rgb(229,100,53)" rx="2" ry="2" />
<text  x="742.88" y="287.5" ></text>
</g>
<g >
<title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (270 samples, 4.16%)</title><rect x="951.2" y="341" width="49.1" height="15.0" fill="rgb(218,76,48)" rx="2" ry="2" />
<text  x="954.20" y="351.5" >&lt;&amp;mi..</text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.02%)</title><rect x="640.3" y="325" width="0.2" height="15.0" fill="rgb(209,179,13)" rx="2" ry="2" />
<text  x="643.32" y="335.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (1 samples, 0.02%)</title><rect x="941.0" y="69" width="0.2" height="15.0" fill="rgb(208,79,43)" rx="2" ry="2" />
<text  x="944.00" y="79.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::parse_with (2 samples, 0.03%)</title><rect x="940.8" y="293" width="0.4" height="15.0" fill="rgb(223,159,17)" rx="2" ry="2" />
<text  x="943.82" y="303.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::level::Level::next_expiration (4 samples, 0.06%)</title><rect x="200.8" y="357" width="0.7" height="15.0" fill="rgb(217,91,21)" rx="2" ry="2" />
<text  x="203.75" y="367.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 0.17%)</title><rect x="82.4" y="437" width="2.0" height="15.0" fill="rgb(252,182,12)" rx="2" ry="2" />
<text  x="85.44" y="447.5" ></text>
</g>
<g >
<title>futures_task::waker::clone_arc_raw (27 samples, 0.42%)</title><rect x="930.1" y="293" width="4.9" height="15.0" fill="rgb(220,215,42)" rx="2" ry="2" />
<text  x="933.08" y="303.5" ></text>
</g>
<g >
<title>__rdl_alloc (2 samples, 0.03%)</title><rect x="640.0" y="325" width="0.3" height="15.0" fill="rgb(242,24,29)" rx="2" ry="2" />
<text  x="642.95" y="335.5" ></text>
</g>
<g >
<title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (139 samples, 2.14%)</title><rect x="176.2" y="405" width="25.3" height="15.0" fill="rgb(210,14,14)" rx="2" ry="2" />
<text  x="179.18" y="415.5" >&lt;..</text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (25 samples, 0.39%)</title><rect x="297.2" y="389" width="4.6" height="15.0" fill="rgb(244,64,16)" rx="2" ry="2" />
<text  x="300.22" y="399.5" ></text>
</g>
<g >
<title>tokio::coop::Budget::decrement (5 samples, 0.08%)</title><rect x="740.6" y="277" width="0.9" height="15.0" fill="rgb(237,88,52)" rx="2" ry="2" />
<text  x="743.61" y="287.5" ></text>
</g>
<g >
<title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6,483 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(244,130,39)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text>
</g>
<g >
<title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (1 samples, 0.02%)</title><rect x="942.3" y="293" width="0.2" height="15.0" fill="rgb(240,144,30)" rx="2" ry="2" />
<text  x="945.28" y="303.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (1 samples, 0.02%)</title><rect x="567.1" y="309" width="0.2" height="15.0" fill="rgb(226,14,38)" rx="2" ry="2" />
<text  x="570.15" y="319.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_socket_addr_v4 (2 samples, 0.03%)</title><rect x="940.8" y="245" width="0.4" height="15.0" fill="rgb(210,163,52)" rx="2" ry="2" />
<text  x="943.82" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$$u5b$core..option..Option$LT$core..task..wake..Waker$GT$$u3b$$u20$32$u5d$$GT$::hdc1a76692e228511 (1 samples, 0.02%)</title><rect x="252.1" y="357" width="0.2" height="15.0" fill="rgb(245,139,29)" rx="2" ry="2" />
<text  x="255.08" y="367.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (835 samples, 12.88%)</title><rect x="737.0" y="293" width="151.9" height="15.0" fill="rgb(241,143,3)" rx="2" ry="2" />
<text  x="739.97" y="303.5" >tokio::sync::mpsc::..</text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (61 samples, 0.94%)</title><rect x="505.8" y="341" width="11.1" height="15.0" fill="rgb(213,209,11)" rx="2" ry="2" />
<text  x="508.81" y="351.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="84.4" y="421" width="0.2" height="15.0" fill="rgb(219,174,14)" rx="2" ry="2" />
<text  x="87.44" y="431.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.05%)</title><rect x="716.8" y="309" width="0.5" height="15.0" fill="rgb(205,88,16)" rx="2" ry="2" />
<text  x="719.76" y="319.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.02%)</title><rect x="943.4" y="277" width="0.2" height="15.0" fill="rgb(216,192,32)" rx="2" ry="2" />
<text  x="946.37" y="287.5" ></text>
</g>
<g >
<title>futures_task::waker::wake_by_ref_arc_raw (1 samples, 0.02%)</title><rect x="939.5" y="309" width="0.2" height="15.0" fill="rgb(245,171,20)" rx="2" ry="2" />
<text  x="942.55" y="319.5" ></text>
</g>
<g >
<title>&lt;&amp;mio::event::events::Events as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="251.4" y="357" width="0.1" height="15.0" fill="rgb(225,42,9)" rx="2" ry="2" />
<text  x="254.35" y="367.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.03%)</title><rect x="1188.0" y="341" width="0.4" height="15.0" fill="rgb(224,163,54)" rx="2" ry="2" />
<text  x="1191.00" y="351.5" ></text>
</g>
<g >
<title>&lt;tokio::time::driver::sleep::Sleep as core::future::future::Future&gt;::poll (6 samples, 0.09%)</title><rect x="581.2" y="357" width="1.1" height="15.0" fill="rgb(209,123,34)" rx="2" ry="2" />
<text  x="584.16" y="367.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::acquire (4 samples, 0.06%)</title><rect x="524.9" y="357" width="0.7" height="15.0" fill="rgb(228,93,42)" rx="2" ry="2" />
<text  x="527.92" y="367.5" ></text>
</g>
<g >
<title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (6,483 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(223,38,15)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;</text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (2 samples, 0.03%)</title><rect x="278.7" y="357" width="0.3" height="15.0" fill="rgb(229,80,22)" rx="2" ry="2" />
<text  x="281.65" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::yield_now (8 samples, 0.12%)</title><rect x="1187.6" y="389" width="1.5" height="15.0" fill="rgb(219,37,54)" rx="2" ry="2" />
<text  x="1190.63" y="399.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_read_io (483 samples, 7.45%)</title><rect x="947.4" y="357" width="87.9" height="15.0" fill="rgb(239,228,54)" rx="2" ry="2" />
<text  x="950.37" y="367.5" >tokio::io:..</text>
</g>
<g >
<title>std::net::parser::Parser::read_socket_addr_v4::_$u7b$$u7b$closure$u7d$$u7d$::hc299aa0fc7215c63 (2 samples, 0.03%)</title><rect x="940.8" y="213" width="0.4" height="15.0" fill="rgb(228,193,28)" rx="2" ry="2" />
<text  x="943.82" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (4 samples, 0.06%)</title><rect x="942.8" y="309" width="0.8" height="15.0" fill="rgb(221,120,33)" rx="2" ry="2" />
<text  x="945.82" y="319.5" ></text>
</g>
<g >
<title>tokio::io::driver::Driver::turn (5 samples, 0.08%)</title><rect x="250.8" y="373" width="0.9" height="15.0" fill="rgb(228,164,12)" rx="2" ry="2" />
<text  x="253.81" y="383.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_ipv4_addr::_$u7b$$u7b$closure$u7d$$u7d$::h3ffcfbe29c02a0f7 (2 samples, 0.03%)</title><rect x="940.8" y="165" width="0.4" height="15.0" fill="rgb(247,43,13)" rx="2" ry="2" />
<text  x="943.82" y="175.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (37 samples, 0.57%)</title><rect x="473.2" y="341" width="6.8" height="15.0" fill="rgb(247,24,3)" rx="2" ry="2" />
<text  x="476.23" y="351.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="716.9" y="293" width="0.4" height="15.0" fill="rgb(229,39,9)" rx="2" ry="2" />
<text  x="719.94" y="303.5" ></text>
</g>
<g >
<title>tokio::time::clock::Clock::now (18 samples, 0.28%)</title><rect x="194.0" y="373" width="3.3" height="15.0" fill="rgb(211,5,52)" rx="2" ry="2" />
<text  x="197.02" y="383.5" ></text>
</g>
<g >
<title>__GI___socket (2 samples, 0.03%)</title><rect x="940.1" y="309" width="0.4" height="15.0" fill="rgb(230,114,28)" rx="2" ry="2" />
<text  x="943.09" y="319.5" ></text>
</g>
<g >
<title>tokio::sync::task::atomic_waker::AtomicWaker::wake (66 samples, 1.02%)</title><rect x="568.4" y="357" width="12.0" height="15.0" fill="rgb(229,211,37)" rx="2" ry="2" />
<text  x="571.42" y="367.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (4,855 samples, 74.89%)</title><rect x="306.3" y="421" width="883.7" height="15.0" fill="rgb(251,35,49)" rx="2" ry="2" />
<text  x="309.32" y="431.5" >std::thread::local::LocalKey&lt;T&gt;::with</text>
</g>
<g >
<title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="640.0" y="309" width="0.3" height="15.0" fill="rgb(249,16,33)" rx="2" ry="2" />
<text  x="642.95" y="319.5" ></text>
</g>
<g >
<title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.02%)</title><rect x="251.7" y="373" width="0.2" height="15.0" fill="rgb(211,139,46)" rx="2" ry="2" />
<text  x="254.72" y="383.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::drop_slow (45 samples, 0.69%)</title><rect x="910.2" y="293" width="8.2" height="15.0" fill="rgb(209,15,33)" rx="2" ry="2" />
<text  x="913.24" y="303.5" ></text>
</g>
<g >
<title>tokio::net::tcp::stream::TcpStream::new (6 samples, 0.09%)</title><rect x="941.2" y="325" width="1.1" height="15.0" fill="rgb(206,123,48)" rx="2" ry="2" />
<text  x="944.19" y="335.5" ></text>
</g>
<g >
<title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (4 samples, 0.06%)</title><rect x="252.1" y="373" width="0.7" height="15.0" fill="rgb(233,76,23)" rx="2" ry="2" />
<text  x="255.08" y="383.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (4 samples, 0.06%)</title><rect x="291.4" y="389" width="0.7" height="15.0" fill="rgb(242,204,42)" rx="2" ry="2" />
<text  x="294.39" y="399.5" ></text>
</g>
<g >
<title>__rdl_alloc (5 samples, 0.08%)</title><rect x="1134.7" y="373" width="0.9" height="15.0" fill="rgb(215,209,40)" rx="2" ry="2" />
<text  x="1137.67" y="383.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="606.5" y="277" width="0.1" height="15.0" fill="rgb(212,194,42)" rx="2" ry="2" />
<text  x="609.46" y="287.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (38 samples, 0.59%)</title><rect x="561.5" y="341" width="6.9" height="15.0" fill="rgb(221,67,49)" rx="2" ry="2" />
<text  x="564.50" y="351.5" ></text>
</g>
<g >
<title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (493 samples, 7.60%)</title><rect x="945.6" y="373" width="89.7" height="15.0" fill="rgb(253,206,52)" rx="2" ry="2" />
<text  x="948.55" y="383.5" >&lt;tokio::ne..</text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_inc (14 samples, 0.22%)</title><rect x="470.7" y="325" width="2.5" height="15.0" fill="rgb(212,215,46)" rx="2" ry="2" />
<text  x="473.68" y="335.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (8 samples, 0.12%)</title><rect x="1187.6" y="373" width="1.5" height="15.0" fill="rgb(217,5,30)" rx="2" ry="2" />
<text  x="1190.63" y="383.5" ></text>
</g>
<g >
<title>&lt; (119 samples, 1.84%)</title><rect x="744.4" y="261" width="21.7" height="15.0" fill="rgb(225,70,3)" rx="2" ry="2" />
<text  x="747.43" y="271.5" >&lt;</text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.12%)</title><rect x="566.8" y="325" width="1.4" height="15.0" fill="rgb(221,76,54)" rx="2" ry="2" />
<text  x="569.78" y="335.5" ></text>
</g>
<g >
<title>__GI___clone (6,483 samples, 100.00%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(244,14,49)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >__GI___clone</text>
</g>
<g >
<title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (1 samples, 0.02%)</title><rect x="1187.6" y="357" width="0.2" height="15.0" fill="rgb(228,106,38)" rx="2" ry="2" />
<text  x="1190.63" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.02%)</title><rect x="1156.5" y="389" width="0.2" height="15.0" fill="rgb(220,112,28)" rx="2" ry="2" />
<text  x="1159.51" y="399.5" ></text>
</g>
<g >
<title>std::net::parser::_$LT$impl$u20$core..str..traits..FromStr$u20$for$u20$std..net..addr..SocketAddr$GT$::from_str::_$u7b$$u7b$closure$u7d$$u7d$::hfe67c138790cc2aa (2 samples, 0.03%)</title><rect x="940.8" y="277" width="0.4" height="15.0" fill="rgb(240,149,9)" rx="2" ry="2" />
<text  x="943.82" y="287.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (448 samples, 6.91%)</title><rect x="766.1" y="261" width="81.5" height="15.0" fill="rgb(250,62,10)" rx="2" ry="2" />
<text  x="769.09" y="271.5" >tokio::sy..</text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4,815 samples, 74.27%)</title><rect x="312.7" y="405" width="876.4" height="15.0" fill="rgb(224,209,20)" rx="2" ry="2" />
<text  x="315.69" y="415.5" >tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (1 samples, 0.02%)</title><rect x="740.4" y="261" width="0.2" height="15.0" fill="rgb(252,118,28)" rx="2" ry="2" />
<text  x="743.42" y="271.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (121 samples, 1.87%)</title><rect x="284.3" y="421" width="22.0" height="15.0" fill="rgb(235,150,0)" rx="2" ry="2" />
<text  x="287.30" y="431.5" >p..</text>
</g>
<g >
<title>__pthread_enable_asynccancel (17 samples, 0.26%)</title><rect x="997.2" y="245" width="3.1" height="15.0" fill="rgb(223,80,3)" rx="2" ry="2" />
<text  x="1000.25" y="255.5" ></text>
</g>
<g >
<title>futures_task::waker_ref::WakerRef::new_unowned (1 samples, 0.02%)</title><rect x="939.7" y="309" width="0.2" height="15.0" fill="rgb(237,194,23)" rx="2" ry="2" />
<text  x="942.73" y="319.5" ></text>
</g>
<g >
<title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (19 samples, 0.29%)</title><rect x="197.3" y="373" width="3.5" height="15.0" fill="rgb(245,37,11)" rx="2" ry="2" />
<text  x="200.29" y="383.5" ></text>
</g>
<g >
<title>bytes::bytes::promotable_even_drop (2 samples, 0.03%)</title><rect x="716.2" y="325" width="0.4" height="15.0" fill="rgb(231,74,19)" rx="2" ry="2" />
<text  x="719.22" y="335.5" ></text>
</g>
<g >
<title>std::time::Instant::now (25 samples, 0.39%)</title><rect x="297.2" y="405" width="4.6" height="15.0" fill="rgb(230,101,50)" rx="2" ry="2" />
<text  x="300.22" y="415.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (2 samples, 0.03%)</title><rect x="252.3" y="357" width="0.3" height="15.0" fill="rgb(223,26,15)" rx="2" ry="2" />
<text  x="255.26" y="367.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 0.02%)</title><rect x="605.9" y="309" width="0.2" height="15.0" fill="rgb(224,187,39)" rx="2" ry="2" />
<text  x="608.92" y="319.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.02%)</title><rect x="190.4" y="325" width="0.2" height="15.0" fill="rgb(247,100,52)" rx="2" ry="2" />
<text  x="193.38" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_dec (2 samples, 0.03%)</title><rect x="581.9" y="309" width="0.4" height="15.0" fill="rgb(234,132,28)" rx="2" ry="2" />
<text  x="584.89" y="319.5" ></text>
</g>
<g >
<title>core::fmt::write (2 samples, 0.03%)</title><rect x="715.9" y="293" width="0.3" height="15.0" fill="rgb(233,199,12)" rx="2" ry="2" />
<text  x="718.85" y="303.5" ></text>
</g>
<g >
<title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="716.8" y="293" width="0.1" height="15.0" fill="rgb(206,63,34)" rx="2" ry="2" />
<text  x="719.76" y="303.5" ></text>
</g>
<g >
<title>&lt;tokio::time::driver::TimerUnpark&lt;P&gt; as tokio::park::Unpark&gt;::unpark (3 samples, 0.05%)</title><rect x="283.7" y="421" width="0.6" height="15.0" fill="rgb(254,87,11)" rx="2" ry="2" />
<text  x="286.75" y="431.5" ></text>
</g>
<g >
<title>mio::sys::unix::waker::eventfd::Waker::wake (5 samples, 0.08%)</title><rect x="278.1" y="405" width="0.9" height="15.0" fill="rgb(248,43,37)" rx="2" ry="2" />
<text  x="281.11" y="415.5" ></text>
</g>
<g >
<title>futures_task::waker::clone_arc_raw (3 samples, 0.05%)</title><rect x="888.4" y="245" width="0.5" height="15.0" fill="rgb(234,150,50)" rx="2" ry="2" />
<text  x="891.40" y="255.5" ></text>
</g>
<g >
<title>tokio::signal::unix::driver::Driver::process (1 samples, 0.02%)</title><rect x="251.9" y="373" width="0.2" height="15.0" fill="rgb(213,173,12)" rx="2" ry="2" />
<text  x="254.90" y="383.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.02%)</title><rect x="605.9" y="293" width="0.2" height="15.0" fill="rgb(224,101,26)" rx="2" ry="2" />
<text  x="608.92" y="303.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (9 samples, 0.14%)</title><rect x="195.7" y="325" width="1.6" height="15.0" fill="rgb(216,195,25)" rx="2" ry="2" />
<text  x="198.65" y="335.5" ></text>
</g>
<g >
<title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (5 samples, 0.08%)</title><rect x="581.3" y="341" width="1.0" height="15.0" fill="rgb(210,218,44)" rx="2" ry="2" />
<text  x="584.34" y="351.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (4 samples, 0.06%)</title><rect x="814.1" y="197" width="0.8" height="15.0" fill="rgb(213,7,42)" rx="2" ry="2" />
<text  x="817.14" y="207.5" ></text>
</g>
<g >
<title>core::time::Duration::new (1 samples, 0.02%)</title><rect x="195.5" y="277" width="0.2" height="15.0" fill="rgb(243,62,20)" rx="2" ry="2" />
<text  x="198.47" y="287.5" ></text>
</g>
<g >
<title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (810 samples, 12.49%)</title><rect x="741.5" y="277" width="147.4" height="15.0" fill="rgb(210,138,24)" rx="2" ry="2" />
<text  x="744.52" y="287.5" >tokio::loom::std::..</text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (1 samples, 0.02%)</title><rect x="190.2" y="341" width="0.2" height="15.0" fill="rgb(238,193,44)" rx="2" ry="2" />
<text  x="193.19" y="351.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h7af2c173f35b9f21 (6,483 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(212,215,30)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h7af2c173f35b9f21</text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.02%)</title><rect x="251.9" y="341" width="0.2" height="15.0" fill="rgb(251,81,33)" rx="2" ry="2" />
<text  x="254.90" y="351.5" ></text>
</g>
<g >
<title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (8 samples, 0.12%)</title><rect x="344.7" y="373" width="1.5" height="15.0" fill="rgb(238,40,13)" rx="2" ry="2" />
<text  x="347.72" y="383.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::poll (3 samples, 0.05%)</title><rect x="200.2" y="357" width="0.6" height="15.0" fill="rgb(230,63,6)" rx="2" ry="2" />
<text  x="203.21" y="367.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="605.6" y="309" width="0.3" height="15.0" fill="rgb(216,62,35)" rx="2" ry="2" />
<text  x="608.55" y="319.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_separator (1 samples, 0.02%)</title><rect x="941.0" y="149" width="0.2" height="15.0" fill="rgb(231,12,36)" rx="2" ry="2" />
<text  x="944.00" y="159.5" ></text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::release (51 samples, 0.79%)</title><rect x="1146.3" y="373" width="9.3" height="15.0" fill="rgb(215,169,54)" rx="2" ry="2" />
<text  x="1149.32" y="383.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::chan::channel (4 samples, 0.06%)</title><rect x="942.8" y="325" width="0.8" height="15.0" fill="rgb(212,205,42)" rx="2" ry="2" />
<text  x="945.82" y="335.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (3 samples, 0.05%)</title><rect x="706.8" y="309" width="0.5" height="15.0" fill="rgb(212,149,21)" rx="2" ry="2" />
<text  x="709.75" y="319.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (2 samples, 0.03%)</title><rect x="940.8" y="181" width="0.4" height="15.0" fill="rgb(207,152,11)" rx="2" ry="2" />
<text  x="943.82" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_terminal (1 samples, 0.02%)</title><rect x="1156.3" y="373" width="0.2" height="15.0" fill="rgb(250,210,39)" rx="2" ry="2" />
<text  x="1159.33" y="383.5" ></text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (2 samples, 0.03%)</title><rect x="312.3" y="405" width="0.4" height="15.0" fill="rgb(251,2,48)" rx="2" ry="2" />
<text  x="315.33" y="415.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_running (149 samples, 2.30%)</title><rect x="1160.5" y="389" width="27.1" height="15.0" fill="rgb(209,214,52)" rx="2" ry="2" />
<text  x="1163.51" y="399.5" >t..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tcp_aggregation::BufferedSource&gt;&gt; (4 samples, 0.06%)</title><rect x="716.6" y="325" width="0.7" height="15.0" fill="rgb(252,174,7)" rx="2" ry="2" />
<text  x="719.58" y="335.5" ></text>
</g>
<g >
<title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (11 samples, 0.17%)</title><rect x="250.8" y="405" width="2.0" height="15.0" fill="rgb(231,216,48)" rx="2" ry="2" />
<text  x="253.81" y="415.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="940.8" y="149" width="0.2" height="15.0" fill="rgb(208,134,16)" rx="2" ry="2" />
<text  x="943.82" y="159.5" ></text>
</g>
<g >
<title>parking_lot_core::parking_lot::lock_bucket_pair (4 samples, 0.06%)</title><rect x="813.0" y="181" width="0.8" height="15.0" fill="rgb(215,1,15)" rx="2" ry="2" />
<text  x="816.05" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (61 samples, 0.94%)</title><rect x="628.5" y="309" width="11.1" height="15.0" fill="rgb(244,148,37)" rx="2" ry="2" />
<text  x="631.49" y="319.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (8 samples, 0.12%)</title><rect x="195.8" y="293" width="1.5" height="15.0" fill="rgb(246,228,25)" rx="2" ry="2" />
<text  x="198.84" y="303.5" ></text>
</g>
<g >
<title>std::sys::unix::net::Socket::read (255 samples, 3.93%)</title><rect x="953.9" y="293" width="46.4" height="15.0" fill="rgb(227,131,7)" rx="2" ry="2" />
<text  x="956.93" y="303.5" >std:..</text>
</g>
<g >
<title>syscall (25 samples, 0.39%)</title><rect x="301.8" y="405" width="4.5" height="15.0" fill="rgb(236,127,38)" rx="2" ry="2" />
<text  x="304.77" y="415.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (4 samples, 0.06%)</title><rect x="1076.8" y="357" width="0.7" height="15.0" fill="rgb(242,225,49)" rx="2" ry="2" />
<text  x="1079.79" y="367.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (237 samples, 3.66%)</title><rect x="481.6" y="357" width="43.1" height="15.0" fill="rgb(229,127,2)" rx="2" ry="2" />
<text  x="484.60" y="367.5" >futu..</text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.02%)</title><rect x="715.7" y="293" width="0.2" height="15.0" fill="rgb(225,41,1)" rx="2" ry="2" />
<text  x="718.67" y="303.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.02%)</title><rect x="190.6" y="325" width="0.1" height="15.0" fill="rgb(245,132,19)" rx="2" ry="2" />
<text  x="193.56" y="335.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="813.8" y="149" width="0.2" height="15.0" fill="rgb(241,225,22)" rx="2" ry="2" />
<text  x="816.78" y="159.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::checked_sub_instant (2 samples, 0.03%)</title><rect x="195.3" y="309" width="0.4" height="15.0" fill="rgb(206,229,54)" rx="2" ry="2" />
<text  x="198.29" y="319.5" ></text>
</g>
<g >
<title>mio::net::tcp::stream::TcpStream::connect (4 samples, 0.06%)</title><rect x="939.9" y="325" width="0.7" height="15.0" fill="rgb(217,43,34)" rx="2" ry="2" />
<text  x="942.91" y="335.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="813.8" y="117" width="0.2" height="15.0" fill="rgb(230,28,13)" rx="2" ry="2" />
<text  x="816.78" y="127.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (2 samples, 0.03%)</title><rect x="190.4" y="341" width="0.3" height="15.0" fill="rgb(212,18,17)" rx="2" ry="2" />
<text  x="193.38" y="351.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (235 samples, 3.62%)</title><rect x="525.6" y="357" width="42.8" height="15.0" fill="rgb(242,217,38)" rx="2" ry="2" />
<text  x="528.65" y="367.5" >toki..</text>
</g>
<g >
<title>tokio::runtime::task::waker::clone_waker (16 samples, 0.25%)</title><rect x="470.3" y="341" width="2.9" height="15.0" fill="rgb(243,41,36)" rx="2" ry="2" />
<text  x="473.31" y="351.5" ></text>
</g>
<g >
<title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (616 samples, 9.50%)</title><rect x="367.8" y="357" width="112.2" height="15.0" fill="rgb(210,63,38)" rx="2" ry="2" />
<text  x="370.84" y="367.5" >&lt;tokio::sync:..</text>
</g>
<g >
<title>futures_task::waker::wake_arc_raw (1 samples, 0.02%)</title><rect x="524.6" y="341" width="0.1" height="15.0" fill="rgb(224,94,18)" rx="2" ry="2" />
<text  x="527.55" y="351.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (219 samples, 3.38%)</title><rect x="807.6" y="213" width="39.8" height="15.0" fill="rgb(223,208,2)" rx="2" ry="2" />
<text  x="810.59" y="223.5" >tok..</text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="605.6" y="325" width="0.5" height="15.0" fill="rgb(227,206,31)" rx="2" ry="2" />
<text  x="608.55" y="335.5" ></text>
</g>
<g >
<title>tokio-runtime-w (6,483 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(210,213,32)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >tokio-runtime-w</text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_idle (21 samples, 0.32%)</title><rect x="1156.7" y="389" width="3.8" height="15.0" fill="rgb(219,117,15)" rx="2" ry="2" />
<text  x="1159.69" y="399.5" ></text>
</g>
<g >
<title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (372 samples, 5.74%)</title><rect x="84.6" y="437" width="67.7" height="15.0" fill="rgb(223,221,19)" rx="2" ry="2" />
<text  x="87.63" y="447.5" >tokio::..</text>
</g>
<g >
<title>tokio::runtime::task::state::State::ref_dec (23 samples, 0.35%)</title><rect x="795.4" y="229" width="4.2" height="15.0" fill="rgb(221,225,12)" rx="2" ry="2" />
<text  x="798.39" y="239.5" ></text>
</g>
<g >
<title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.03%)</title><rect x="195.3" y="341" width="0.4" height="15.0" fill="rgb(210,14,45)" rx="2" ry="2" />
<text  x="198.29" y="351.5" ></text>
</g>
<g >
<title>tokio::time::driver::Driver&lt;P&gt;::park_internal (11 samples, 0.17%)</title><rect x="250.8" y="389" width="2.0" height="15.0" fill="rgb(206,6,2)" rx="2" ry="2" />
<text  x="253.81" y="399.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (1 samples, 0.02%)</title><rect x="941.0" y="37" width="0.2" height="15.0" fill="rgb(252,213,38)" rx="2" ry="2" />
<text  x="944.00" y="47.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="940.6" y="309" width="0.2" height="15.0" fill="rgb(248,143,9)" rx="2" ry="2" />
<text  x="943.64" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="606.5" y="293" width="0.1" height="15.0" fill="rgb(226,144,29)" rx="2" ry="2" />
<text  x="609.46" y="303.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::level::Level::next_expiration (2 samples, 0.03%)</title><rect x="200.4" y="325" width="0.4" height="15.0" fill="rgb(236,76,49)" rx="2" ry="2" />
<text  x="203.39" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.05%)</title><rect x="524.0" y="309" width="0.6" height="15.0" fill="rgb(223,120,49)" rx="2" ry="2" />
<text  x="527.01" y="319.5" ></text>
</g>
<g >
<title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.02%)</title><rect x="716.0" y="277" width="0.2" height="15.0" fill="rgb(246,55,51)" rx="2" ry="2" />
<text  x="719.03" y="287.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (3 samples, 0.05%)</title><rect x="811.8" y="197" width="0.5" height="15.0" fill="rgb(214,155,31)" rx="2" ry="2" />
<text  x="814.77" y="207.5" ></text>
</g>
<g >
<title>syscall (190 samples, 2.93%)</title><rect x="215.5" y="389" width="34.6" height="15.0" fill="rgb(247,99,40)" rx="2" ry="2" />
<text  x="218.49" y="399.5" >sy..</text>
</g>
<g >
<title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.02%)</title><rect x="847.4" y="245" width="0.2" height="15.0" fill="rgb(238,218,33)" rx="2" ry="2" />
<text  x="850.45" y="255.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Shared::schedule_local (4 samples, 0.06%)</title><rect x="1188.4" y="357" width="0.7" height="15.0" fill="rgb(232,224,23)" rx="2" ry="2" />
<text  x="1191.36" y="367.5" ></text>
</g>
<g >
<title>__libc_recv (248 samples, 3.83%)</title><rect x="955.2" y="261" width="45.1" height="15.0" fill="rgb(241,176,52)" rx="2" ry="2" />
<text  x="958.20" y="271.5" >__li..</text>
</g>
<g >
<title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (3 samples, 0.05%)</title><rect x="1155.8" y="373" width="0.5" height="15.0" fill="rgb(234,180,28)" rx="2" ry="2" />
<text  x="1158.78" y="383.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="940.5" y="277" width="0.1" height="15.0" fill="rgb(215,142,19)" rx="2" ry="2" />
<text  x="943.46" y="287.5" ></text>
</g>
<g >
<title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (7 samples, 0.11%)</title><rect x="190.7" y="373" width="1.3" height="15.0" fill="rgb(242,97,45)" rx="2" ry="2" />
<text  x="193.74" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="639.6" y="325" width="0.4" height="15.0" fill="rgb(218,73,41)" rx="2" ry="2" />
<text  x="642.59" y="335.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (3 samples, 0.05%)</title><rect x="200.2" y="341" width="0.6" height="15.0" fill="rgb(241,176,21)" rx="2" ry="2" />
<text  x="203.21" y="351.5" ></text>
</g>
<g >
<title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.06%)</title><rect x="291.4" y="405" width="0.7" height="15.0" fill="rgb(239,73,46)" rx="2" ry="2" />
<text  x="294.39" y="415.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::poll (1 samples, 0.02%)</title><rect x="252.6" y="357" width="0.2" height="15.0" fill="rgb(215,23,21)" rx="2" ry="2" />
<text  x="255.63" y="367.5" ></text>
</g>
<g >
<title>tokio::io::driver::Inner::add_source (5 samples, 0.08%)</title><rect x="941.4" y="277" width="0.9" height="15.0" fill="rgb(206,144,4)" rx="2" ry="2" />
<text  x="944.37" y="287.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (10 samples, 0.15%)</title><rect x="192.2" y="357" width="1.8" height="15.0" fill="rgb(211,12,24)" rx="2" ry="2" />
<text  x="195.20" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::drop_join_handle_fast (1 samples, 0.02%)</title><rect x="942.5" y="325" width="0.1" height="15.0" fill="rgb(237,42,47)" rx="2" ry="2" />
<text  x="945.46" y="335.5" ></text>
</g>
<g >
<title>tokio::util::slab::Address::from_usize (1 samples, 0.02%)</title><rect x="568.2" y="325" width="0.2" height="15.0" fill="rgb(249,173,21)" rx="2" ry="2" />
<text  x="571.24" y="335.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (15 samples, 0.23%)</title><rect x="250.1" y="421" width="2.7" height="15.0" fill="rgb(249,214,7)" rx="2" ry="2" />
<text  x="253.08" y="431.5" ></text>
</g>
<g >
<title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (26 samples, 0.40%)</title><rect x="279.0" y="421" width="4.7" height="15.0" fill="rgb(235,10,47)" rx="2" ry="2" />
<text  x="282.02" y="431.5" ></text>
</g>
<g >
<title>__lll_unlock_wake_private (7 samples, 0.11%)</title><rect x="1077.5" y="357" width="1.3" height="15.0" fill="rgb(237,7,3)" rx="2" ry="2" />
<text  x="1080.52" y="367.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.02%)</title><rect x="1134.5" y="341" width="0.2" height="15.0" fill="rgb(230,24,7)" rx="2" ry="2" />
<text  x="1137.49" y="351.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (192 samples, 2.96%)</title><rect x="1000.3" y="341" width="35.0" height="15.0" fill="rgb(237,38,45)" rx="2" ry="2" />
<text  x="1003.34" y="351.5" >to..</text>
</g>
<g >
<title>__libc_enable_asynccancel (2 samples, 0.03%)</title><rect x="187.8" y="325" width="0.4" height="15.0" fill="rgb(219,204,23)" rx="2" ry="2" />
<text  x="190.83" y="335.5" ></text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (1 samples, 0.02%)</title><rect x="581.2" y="341" width="0.1" height="15.0" fill="rgb(251,33,47)" rx="2" ry="2" />
<text  x="584.16" y="351.5" ></text>
</g>
<g >
<title>mio::poll::Poll::poll (27 samples, 0.42%)</title><rect x="183.3" y="357" width="4.9" height="15.0" fill="rgb(245,209,33)" rx="2" ry="2" />
<text  x="186.28" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (5 samples, 0.08%)</title><rect x="567.3" y="309" width="0.9" height="15.0" fill="rgb(225,41,22)" rx="2" ry="2" />
<text  x="570.33" y="319.5" ></text>
</g>
<g >
<title>mio::poll::Poll::poll (1 samples, 0.02%)</title><rect x="251.5" y="357" width="0.2" height="15.0" fill="rgb(206,155,25)" rx="2" ry="2" />
<text  x="254.53" y="367.5" ></text>
</g>
<g >
<title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (9 samples, 0.14%)</title><rect x="480.0" y="357" width="1.6" height="15.0" fill="rgb(234,24,51)" rx="2" ry="2" />
<text  x="482.96" y="367.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (1 samples, 0.02%)</title><rect x="813.8" y="133" width="0.2" height="15.0" fill="rgb(224,114,53)" rx="2" ry="2" />
<text  x="816.78" y="143.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_socket_addr (2 samples, 0.03%)</title><rect x="940.8" y="261" width="0.4" height="15.0" fill="rgb(234,96,49)" rx="2" ry="2" />
<text  x="943.82" y="271.5" ></text>
</g>
<g >
<title>std::sys_common::net::TcpStream::read (255 samples, 3.93%)</title><rect x="953.9" y="309" width="46.4" height="15.0" fill="rgb(238,142,36)" rx="2" ry="2" />
<text  x="956.93" y="319.5" >std:..</text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (5 samples, 0.08%)</title><rect x="941.4" y="293" width="0.9" height="15.0" fill="rgb(215,164,45)" rx="2" ry="2" />
<text  x="944.37" y="303.5" ></text>
</g>
<g >
<title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="715.9" y="277" width="0.1" height="15.0" fill="rgb(229,134,12)" rx="2" ry="2" />
<text  x="718.85" y="287.5" ></text>
</g>
<g >
<title>alloc::fmt::format (2 samples, 0.03%)</title><rect x="715.9" y="325" width="0.3" height="15.0" fill="rgb(233,228,16)" rx="2" ry="2" />
<text  x="718.85" y="335.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.03%)</title><rect x="847.1" y="181" width="0.3" height="15.0" fill="rgb(215,6,29)" rx="2" ry="2" />
<text  x="850.08" y="191.5" ></text>
</g>
<g >
<title>__libc_close (1 samples, 0.02%)</title><rect x="716.8" y="277" width="0.1" height="15.0" fill="rgb(242,186,30)" rx="2" ry="2" />
<text  x="719.76" y="287.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="251.9" y="357" width="0.2" height="15.0" fill="rgb(235,100,16)" rx="2" ry="2" />
<text  x="254.90" y="367.5" ></text>
</g>
<g >
<title>tokio::util::rand::thread_rng_n (7 samples, 0.11%)</title><rect x="943.6" y="325" width="1.2" height="15.0" fill="rgb(226,141,44)" rx="2" ry="2" />
<text  x="946.55" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::schedule (225 samples, 3.47%)</title><rect x="806.5" y="229" width="40.9" height="15.0" fill="rgb(233,70,46)" rx="2" ry="2" />
<text  x="809.50" y="239.5" >tok..</text>
</g>
<g >
<title>core::time::Duration::new (1 samples, 0.02%)</title><rect x="179.5" y="325" width="0.1" height="15.0" fill="rgb(223,39,25)" rx="2" ry="2" />
<text  x="182.46" y="335.5" ></text>
</g>
<g >
<title>_int_malloc (307 samples, 4.74%)</title><rect x="1078.8" y="357" width="55.9" height="15.0" fill="rgb(209,66,41)" rx="2" ry="2" />
<text  x="1081.79" y="367.5" >_int_..</text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.06%)</title><rect x="944.8" y="341" width="0.8" height="15.0" fill="rgb(251,7,8)" rx="2" ry="2" />
<text  x="947.83" y="351.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (10 samples, 0.15%)</title><rect x="995.4" y="245" width="1.8" height="15.0" fill="rgb(221,59,12)" rx="2" ry="2" />
<text  x="998.43" y="255.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.05%)</title><rect x="765.5" y="245" width="0.6" height="15.0" fill="rgb(207,98,31)" rx="2" ry="2" />
<text  x="768.54" y="255.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (8 samples, 0.12%)</title><rect x="195.8" y="277" width="1.5" height="15.0" fill="rgb(232,154,28)" rx="2" ry="2" />
<text  x="198.84" y="287.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 0.02%)</title><rect x="567.0" y="309" width="0.1" height="15.0" fill="rgb(228,155,36)" rx="2" ry="2" />
<text  x="569.96" y="319.5" ></text>
</g>
<g >
<title>_int_free (41 samples, 0.63%)</title><rect x="902.8" y="293" width="7.4" height="15.0" fill="rgb(229,115,26)" rx="2" ry="2" />
<text  x="905.78" y="303.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (9 samples, 0.14%)</title><rect x="195.7" y="309" width="1.6" height="15.0" fill="rgb(254,130,43)" rx="2" ry="2" />
<text  x="198.65" y="319.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::checked_sub_instant (2 samples, 0.03%)</title><rect x="179.3" y="357" width="0.3" height="15.0" fill="rgb(254,205,52)" rx="2" ry="2" />
<text  x="182.27" y="367.5" ></text>
</g>
<g >
<title>tokio::io::read_buf::slice_assume_init_mut (2 samples, 0.03%)</title><rect x="1137.9" y="373" width="0.4" height="15.0" fill="rgb(226,202,1)" rx="2" ry="2" />
<text  x="1140.94" y="383.5" ></text>
</g>
<g >
<title>std::time::Instant::now (9 samples, 0.14%)</title><rect x="195.7" y="341" width="1.6" height="15.0" fill="rgb(223,29,29)" rx="2" ry="2" />
<text  x="198.65" y="351.5" ></text>
</g>
<g >
<title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (261 samples, 4.03%)</title><rect x="952.8" y="325" width="47.5" height="15.0" fill="rgb(224,126,53)" rx="2" ry="2" />
<text  x="955.84" y="335.5" >&lt;&amp;st..</text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (3 samples, 0.05%)</title><rect x="291.6" y="357" width="0.5" height="15.0" fill="rgb(241,136,11)" rx="2" ry="2" />
<text  x="294.58" y="367.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (1 samples, 0.02%)</title><rect x="941.0" y="133" width="0.2" height="15.0" fill="rgb(228,155,25)" rx="2" ry="2" />
<text  x="944.00" y="143.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_ipv4_addr::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hac54fcbd52b33254 (1 samples, 0.02%)</title><rect x="941.0" y="101" width="0.2" height="15.0" fill="rgb(207,174,28)" rx="2" ry="2" />
<text  x="944.00" y="111.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="606.1" y="309" width="0.5" height="15.0" fill="rgb(230,138,11)" rx="2" ry="2" />
<text  x="609.10" y="319.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (24 samples, 0.37%)</title><rect x="297.4" y="357" width="4.4" height="15.0" fill="rgb(235,171,49)" rx="2" ry="2" />
<text  x="300.40" y="367.5" ></text>
</g>
<g >
<title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="813.8" y="181" width="0.2" height="15.0" fill="rgb(208,106,50)" rx="2" ry="2" />
<text  x="816.78" y="191.5" ></text>
</g>
<g >
<title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (213 samples, 3.29%)</title><rect x="847.6" y="261" width="38.8" height="15.0" fill="rgb(219,128,40)" rx="2" ry="2" />
<text  x="850.63" y="271.5" >tok..</text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (5 samples, 0.08%)</title><rect x="1155.6" y="389" width="0.9" height="15.0" fill="rgb(212,118,3)" rx="2" ry="2" />
<text  x="1158.60" y="399.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::now (25 samples, 0.39%)</title><rect x="297.2" y="373" width="4.6" height="15.0" fill="rgb(228,24,32)" rx="2" ry="2" />
<text  x="300.22" y="383.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Context::park_timeout (552 samples, 8.51%)</title><rect x="152.3" y="437" width="100.5" height="15.0" fill="rgb(246,44,9)" rx="2" ry="2" />
<text  x="155.34" y="447.5" >tokio::runti..</text>
</g>
<g >
<title>std::net::parser::Parser::read_separator::_$u7b$$u7b$closure$u7d$$u7d$::h63f18c552430d528 (1 samples, 0.02%)</title><rect x="941.0" y="117" width="0.2" height="15.0" fill="rgb(252,137,31)" rx="2" ry="2" />
<text  x="944.00" y="127.5" ></text>
</g>
<g >
<title>tokio::signal::unix::driver::Driver::process (11 samples, 0.17%)</title><rect x="192.0" y="373" width="2.0" height="15.0" fill="rgb(223,56,32)" rx="2" ry="2" />
<text  x="195.01" y="383.5" ></text>
</g>
<g >
<title>__GI_epoll_ctl (2 samples, 0.03%)</title><rect x="941.6" y="245" width="0.3" height="15.0" fill="rgb(209,124,46)" rx="2" ry="2" />
<text  x="944.55" y="255.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.02%)</title><rect x="523.8" y="325" width="0.2" height="15.0" fill="rgb(223,91,3)" rx="2" ry="2" />
<text  x="526.83" y="335.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="715.7" y="309" width="0.2" height="15.0" fill="rgb(224,8,21)" rx="2" ry="2" />
<text  x="718.67" y="319.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_write_ready (1 samples, 0.02%)</title><rect x="940.6" y="325" width="0.2" height="15.0" fill="rgb(223,41,25)" rx="2" ry="2" />
<text  x="943.64" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Context::run_task (5,149 samples, 79.42%)</title><rect x="252.8" y="437" width="937.2" height="15.0" fill="rgb(245,191,19)" rx="2" ry="2" />
<text  x="255.81" y="447.5" >tokio::runtime::thread_pool::worker::Context::run_task</text>
</g>
<g >
<title>parking_lot_core::parking_lot::lock_bucket_pair (27 samples, 0.42%)</title><rect x="292.3" y="405" width="4.9" height="15.0" fill="rgb(237,76,8)" rx="2" ry="2" />
<text  x="295.30" y="415.5" ></text>
</g>
<g >
<title>start_thread (6,483 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(228,210,4)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >start_thread</text>
</g>
<g >
<title>core::fmt::num::imp::fmt_u64 (1 samples, 0.02%)</title><rect x="716.0" y="261" width="0.2" height="15.0" fill="rgb(211,24,6)" rx="2" ry="2" />
<text  x="719.03" y="271.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number (1 samples, 0.02%)</title><rect x="941.0" y="85" width="0.2" height="15.0" fill="rgb(252,142,20)" rx="2" ry="2" />
<text  x="944.00" y="95.5" ></text>
</g>
<g >
<title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (112 samples, 1.73%)</title><rect x="918.4" y="309" width="20.4" height="15.0" fill="rgb(249,157,47)" rx="2" ry="2" />
<text  x="921.43" y="319.5" ></text>
</g>
<g >
<title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="813.8" y="165" width="0.2" height="15.0" fill="rgb(222,131,38)" rx="2" ry="2" />
<text  x="816.78" y="175.5" ></text>
</g>
<g >
<title>std::net::parser::&lt;impl core::str::traits::FromStr for std::net::addr::SocketAddr&gt;::from_str (2 samples, 0.03%)</title><rect x="940.8" y="309" width="0.4" height="15.0" fill="rgb(250,72,43)" rx="2" ry="2" />
<text  x="943.82" y="319.5" ></text>
</g>
<g >
<title>tokio::runtime::spawner::Spawner::spawn (1 samples, 0.02%)</title><rect x="942.3" y="325" width="0.2" height="15.0" fill="rgb(241,107,5)" rx="2" ry="2" />
<text  x="945.28" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (292 samples, 4.50%)</title><rect x="794.3" y="245" width="53.1" height="15.0" fill="rgb(228,88,24)" rx="2" ry="2" />
<text  x="797.30" y="255.5" >tokio..</text>
</g>
<g >
<title>tokio::util::slab::Allocator&lt;T&gt;::allocate (2 samples, 0.03%)</title><rect x="941.9" y="261" width="0.4" height="15.0" fill="rgb(213,37,25)" rx="2" ry="2" />
<text  x="944.91" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.05%)</title><rect x="606.1" y="325" width="0.5" height="15.0" fill="rgb(238,91,38)" rx="2" ry="2" />
<text  x="609.10" y="335.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (47 samples, 0.72%)</title><rect x="707.3" y="325" width="8.6" height="15.0" fill="rgb(234,218,38)" rx="2" ry="2" />
<text  x="710.30" y="335.5" ></text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.02%)</title><rect x="84.4" y="437" width="0.2" height="15.0" fill="rgb(239,77,48)" rx="2" ry="2" />
<text  x="87.44" y="447.5" ></text>
</g>
<g >
<title>epoll_wait (1 samples, 0.02%)</title><rect x="251.5" y="341" width="0.2" height="15.0" fill="rgb(216,197,13)" rx="2" ry="2" />
<text  x="254.53" y="351.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_number::_$u7b$$u7b$closure$u7d$$u7d$::h6974d5980a092302 (1 samples, 0.02%)</title><rect x="941.0" y="53" width="0.2" height="15.0" fill="rgb(233,3,46)" rx="2" ry="2" />
<text  x="944.00" y="63.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (3 samples, 0.05%)</title><rect x="187.3" y="325" width="0.5" height="15.0" fill="rgb(209,52,25)" rx="2" ry="2" />
<text  x="190.28" y="335.5" ></text>
</g>
<g >
<title>std::time::Instant::duration_since (2 samples, 0.03%)</title><rect x="195.3" y="325" width="0.4" height="15.0" fill="rgb(240,12,10)" rx="2" ry="2" />
<text  x="198.29" y="335.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::run (6,483 samples, 100.00%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(218,110,36)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >tokio::runtime::thread_pool::worker::run</text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,483 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(236,224,31)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text>
</g>
<g >
<title>_int_free (367 samples, 5.66%)</title><rect x="640.5" y="325" width="66.8" height="15.0" fill="rgb(253,161,41)" rx="2" ry="2" />
<text  x="643.50" y="335.5" >_int_free</text>
</g>
<g >
<title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 0.02%)</title><rect x="942.6" y="325" width="0.2" height="15.0" fill="rgb(221,2,48)" rx="2" ry="2" />
<text  x="945.64" y="335.5" ></text>
</g>
<g >
<title>all (6,483 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(209,198,15)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_atomically (2 samples, 0.03%)</title><rect x="940.8" y="229" width="0.4" height="15.0" fill="rgb(223,215,3)" rx="2" ry="2" />
<text  x="943.82" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (3 samples, 0.05%)</title><rect x="943.0" y="293" width="0.6" height="15.0" fill="rgb(205,189,24)" rx="2" ry="2" />
<text  x="946.01" y="303.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$core..future..from_generator..GenFuture$LT$tokio..sync..mpsc..bounded..Sender$LT$core..option..Option$LT$bytes..bytes..Bytes$GT$$GT$..send..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$::he952984a43c093e8 (11 samples, 0.17%)</title><rect x="1135.9" y="373" width="2.0" height="15.0" fill="rgb(244,38,31)" rx="2" ry="2" />
<text  x="1138.94" y="383.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::wait_until_internal (267 samples, 4.12%)</title><rect x="201.5" y="405" width="48.6" height="15.0" fill="rgb(209,18,51)" rx="2" ry="2" />
<text  x="204.48" y="415.5" >park..</text>
</g>
<g >
<title>std::time::Instant::elapsed (12 samples, 0.19%)</title><rect x="195.1" y="357" width="2.2" height="15.0" fill="rgb(240,91,38)" rx="2" ry="2" />
<text  x="198.11" y="367.5" ></text>
</g>
<g >
<title>epoll_wait (26 samples, 0.40%)</title><rect x="183.5" y="341" width="4.7" height="15.0" fill="rgb(231,15,9)" rx="2" ry="2" />
<text  x="186.46" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (90 samples, 1.39%)</title><rect x="623.2" y="325" width="16.4" height="15.0" fill="rgb(247,21,12)" rx="2" ry="2" />
<text  x="626.21" y="335.5" ></text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (8 samples, 0.12%)</title><rect x="192.6" y="341" width="1.4" height="15.0" fill="rgb(248,94,38)" rx="2" ry="2" />
<text  x="195.56" y="351.5" ></text>
</g>
<g >
<title>mio::event::event::Event::is_write_closed (1 samples, 0.02%)</title><rect x="182.7" y="357" width="0.2" height="15.0" fill="rgb(248,176,54)" rx="2" ry="2" />
<text  x="185.73" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="942.3" y="277" width="0.2" height="15.0" fill="rgb(252,138,19)" rx="2" ry="2" />
<text  x="945.28" y="287.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::write (2 samples, 0.03%)</title><rect x="278.7" y="373" width="0.3" height="15.0" fill="rgb(230,162,42)" rx="2" ry="2" />
<text  x="281.65" y="383.5" ></text>
</g>
<g >
<title>futures_task::waker::drop_arc_raw (21 samples, 0.32%)</title><rect x="935.0" y="293" width="3.8" height="15.0" fill="rgb(207,155,34)" rx="2" ry="2" />
<text  x="938.00" y="303.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$$LT$futures_util..stream..futures_unordered..FuturesUnordered$LT$Fut$GT$$u20$as$u20$futures_core..stream..Stream$GT$..poll_next..Bomb$LT$core..future..from_generator..GenFuture$LT$tcp_aggregation..read_from_source..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$$GT$::h86764f269f98b492 (161 samples, 2.48%)</title><rect x="889.1" y="309" width="29.3" height="15.0" fill="rgb(220,225,12)" rx="2" ry="2" />
<text  x="892.13" y="319.5" >co..</text>
</g>
<g >
<title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="606.6" y="309" width="0.2" height="15.0" fill="rgb(247,199,5)" rx="2" ry="2" />
<text  x="609.64" y="319.5" ></text>
</g>
<g >
<title>__rust_dealloc (3 samples, 0.05%)</title><rect x="902.2" y="293" width="0.6" height="15.0" fill="rgb(214,201,12)" rx="2" ry="2" />
<text  x="905.24" y="303.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (4 samples, 0.06%)</title><rect x="938.8" y="309" width="0.7" height="15.0" fill="rgb(215,167,53)" rx="2" ry="2" />
<text  x="941.82" y="319.5" ></text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (14 samples, 0.22%)</title><rect x="188.2" y="357" width="2.5" height="15.0" fill="rgb(206,52,40)" rx="2" ry="2" />
<text  x="191.19" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::blocking::pool::Inner::run (6,483 samples, 100.00%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(222,70,10)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >tokio::runtime::blocking::pool::Inner::run</text>
</g>
<g >
<title>core::fmt::Write::write_fmt (2 samples, 0.03%)</title><rect x="715.9" y="309" width="0.3" height="15.0" fill="rgb(219,7,0)" rx="2" ry="2" />
<text  x="718.85" y="319.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="84.3" y="421" width="0.1" height="15.0" fill="rgb(225,126,28)" rx="2" ry="2" />
<text  x="87.26" y="431.5" ></text>
</g>
<g >
<title>futures_task::arc_wake::ArcWake::wake (42 samples, 0.65%)</title><rect x="516.9" y="341" width="7.7" height="15.0" fill="rgb(249,143,42)" rx="2" ry="2" />
<text  x="519.91" y="351.5" ></text>
</g>
<g >
<title>tokio::time::driver::Driver&lt;P&gt;::park_internal (137 samples, 2.11%)</title><rect x="176.5" y="389" width="25.0" height="15.0" fill="rgb(221,89,22)" rx="2" ry="2" />
<text  x="179.54" y="399.5" >t..</text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="814.0" y="181" width="0.1" height="15.0" fill="rgb(248,189,3)" rx="2" ry="2" />
<text  x="816.96" y="191.5" ></text>
</g>
<g >
<title>tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for alloc::string::String&gt;::to_socket_addrs (2 samples, 0.03%)</title><rect x="940.8" y="325" width="0.4" height="15.0" fill="rgb(223,223,47)" rx="2" ry="2" />
<text  x="943.82" y="335.5" ></text>
</g>
<g >
<title>std::time::Instant::checked_duration_since (2 samples, 0.03%)</title><rect x="179.3" y="373" width="0.3" height="15.0" fill="rgb(210,192,6)" rx="2" ry="2" />
<text  x="182.27" y="383.5" ></text>
</g>
<g >
<title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,483 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(210,46,37)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="200.0" y="357" width="0.2" height="15.0" fill="rgb(222,190,27)" rx="2" ry="2" />
<text  x="203.02" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (2 samples, 0.03%)</title><rect x="581.9" y="325" width="0.4" height="15.0" fill="rgb(228,32,27)" rx="2" ry="2" />
<text  x="584.89" y="335.5" ></text>
</g>
<g >
<title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.03%)</title><rect x="195.3" y="293" width="0.4" height="15.0" fill="rgb(218,202,16)" rx="2" ry="2" />
<text  x="198.29" y="303.5" ></text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (3 samples, 0.05%)</title><rect x="524.0" y="325" width="0.6" height="15.0" fill="rgb(234,1,28)" rx="2" ry="2" />
<text  x="527.01" y="335.5" ></text>
</g>
<g >
<title>__GI___sched_yield (1 samples, 0.02%)</title><rect x="765.9" y="229" width="0.2" height="15.0" fill="rgb(222,50,4)" rx="2" ry="2" />
<text  x="768.91" y="239.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,223 samples, 18.86%)</title><rect x="717.3" y="325" width="222.6" height="15.0" fill="rgb(253,160,42)" rx="2" ry="2" />
<text  x="720.31" y="335.5" >futures_util::stream::stream:..</text>
</g>
<g >
<title>__libc_write (2 samples, 0.03%)</title><rect x="278.7" y="341" width="0.3" height="15.0" fill="rgb(208,17,53)" rx="2" ry="2" />
<text  x="281.65" y="351.5" ></text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (6,483 samples, 100.00%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(228,83,12)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text>
</g>
<g >
<title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (14 samples, 0.22%)</title><rect x="886.4" y="261" width="2.5" height="15.0" fill="rgb(238,105,54)" rx="2" ry="2" />
<text  x="889.40" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,483 samples, 100.00%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(252,77,37)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text>
</g>
<g >
<title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="182.5" y="357" width="0.2" height="15.0" fill="rgb(243,163,26)" rx="2" ry="2" />
<text  x="185.55" y="367.5" ></text>
</g>
<g >
<title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 0.06%)</title><rect x="278.3" y="389" width="0.7" height="15.0" fill="rgb(220,34,19)" rx="2" ry="2" />
<text  x="281.29" y="399.5" ></text>
</g>
<g >
<title>tokio::runtime::task::raw::RawTask::from_raw (2 samples, 0.03%)</title><rect x="795.0" y="229" width="0.4" height="15.0" fill="rgb(206,124,24)" rx="2" ry="2" />
<text  x="798.03" y="239.5" ></text>
</g>
<g >
<title>__libc_connect (1 samples, 0.02%)</title><rect x="940.5" y="293" width="0.1" height="15.0" fill="rgb(223,52,28)" rx="2" ry="2" />
<text  x="943.46" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.02%)</title><rect x="1155.6" y="373" width="0.2" height="15.0" fill="rgb(238,3,50)" rx="2" ry="2" />
<text  x="1158.60" y="383.5" ></text>
</g>
<g >
<title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="940.8" y="133" width="0.2" height="15.0" fill="rgb(238,82,42)" rx="2" ry="2" />
<text  x="943.82" y="143.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::Thread::new::thread_start (6,483 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(217,220,17)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >std::sys::unix::thread::Thread::new::thread_start</text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (4 samples, 0.06%)</title><rect x="200.8" y="373" width="0.7" height="15.0" fill="rgb(245,171,2)" rx="2" ry="2" />
<text  x="203.75" y="383.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,981 samples, 30.56%)</title><rect x="584.3" y="341" width="360.5" height="15.0" fill="rgb(234,146,17)" rx="2" ry="2" />
<text  x="587.26" y="351.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as c..</text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="606.6" y="325" width="0.2" height="15.0" fill="rgb(207,135,8)" rx="2" ry="2" />
<text  x="609.64" y="335.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (7 samples, 0.11%)</title><rect x="705.5" y="309" width="1.3" height="15.0" fill="rgb(206,61,47)" rx="2" ry="2" />
<text  x="708.48" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_free (5 samples, 0.08%)</title><rect x="901.3" y="293" width="0.9" height="15.0" fill="rgb(220,50,11)" rx="2" ry="2" />
<text  x="904.33" y="303.5" ></text>
</g>
<g >
<title>__rust_alloc (2 samples, 0.03%)</title><rect x="1135.6" y="373" width="0.3" height="15.0" fill="rgb(230,31,31)" rx="2" ry="2" />
<text  x="1138.58" y="383.5" ></text>
</g>
<g >
<title>futures_task::waker::wake_by_ref_arc_raw (1 samples, 0.02%)</title><rect x="740.4" y="277" width="0.2" height="15.0" fill="rgb(228,208,36)" rx="2" ry="2" />
<text  x="743.42" y="287.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place$LT$$u5b$core..option..Option$LT$core..task..wake..Waker$GT$$u3b$$u20$32$u5d$$GT$::hdc1a76692e228511 (4 samples, 0.06%)</title><rect x="199.3" y="357" width="0.7" height="15.0" fill="rgb(234,210,9)" rx="2" ry="2" />
<text  x="202.30" y="367.5" ></text>
</g>
<g >
<title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,006 samples, 30.94%)</title><rect x="580.4" y="373" width="365.2" height="15.0" fill="rgb(247,56,43)" rx="2" ry="2" />
<text  x="583.43" y="383.5" >&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::futur..</text>
</g>
<g >
<title>futures_task::waker::wake_arc_raw (1 samples, 0.02%)</title><rect x="524.7" y="357" width="0.2" height="15.0" fill="rgb(230,113,28)" rx="2" ry="2" />
<text  x="527.74" y="367.5" ></text>
</g>
<g >
<title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (1 samples, 0.02%)</title><rect x="292.1" y="405" width="0.2" height="15.0" fill="rgb(232,29,21)" rx="2" ry="2" />
<text  x="295.12" y="415.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,483 samples, 100.00%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(206,200,39)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Shared::schedule_local (179 samples, 2.76%)</title><rect x="814.9" y="197" width="32.5" height="15.0" fill="rgb(232,129,37)" rx="2" ry="2" />
<text  x="817.87" y="207.5" >to..</text>
</g>
<g >
<title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (5 samples, 0.08%)</title><rect x="941.4" y="309" width="0.9" height="15.0" fill="rgb(248,20,49)" rx="2" ry="2" />
<text  x="944.37" y="319.5" ></text>
</g>
<g >
<title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (11 samples, 0.17%)</title><rect x="277.0" y="421" width="2.0" height="15.0" fill="rgb(210,127,36)" rx="2" ry="2" />
<text  x="280.02" y="431.5" ></text>
</g>
<g >
<title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,996 samples, 30.79%)</title><rect x="582.3" y="357" width="363.3" height="15.0" fill="rgb(228,4,53)" rx="2" ry="2" />
<text  x="585.25" y="367.5" >futures_util::stream::stream::StreamExt::poll_nex..</text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.05%)</title><rect x="1187.8" y="357" width="0.6" height="15.0" fill="rgb(228,192,8)" rx="2" ry="2" />
<text  x="1190.82" y="367.5" ></text>
</g>
<g >
<title>std::net::parser::Parser::read_ipv4_addr (2 samples, 0.03%)</title><rect x="940.8" y="197" width="0.4" height="15.0" fill="rgb(238,115,27)" rx="2" ry="2" />
<text  x="943.82" y="207.5" ></text>
</g>
<g >
<title>tokio::runtime::thread_pool::worker::Context::run (6,483 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(217,90,38)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >tokio::runtime::thread_pool::worker::Context::run</text>
</g>
<g >
<title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="1156.1" y="357" width="0.2" height="15.0" fill="rgb(236,211,45)" rx="2" ry="2" />
<text  x="1159.15" y="367.5" ></text>
</g>
<g >
<title>tokio::runtime::task::raw::poll (5 samples, 0.08%)</title><rect x="1189.1" y="405" width="0.9" height="15.0" fill="rgb(248,195,50)" rx="2" ry="2" />
<text  x="1192.09" y="415.5" ></text>
</g>
<g >
<title>&lt;futures_task::waker_ref::WakerRef as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="888.9" y="309" width="0.2" height="15.0" fill="rgb(213,44,11)" rx="2" ry="2" />
<text  x="891.95" y="319.5" ></text>
</g>
<g >
<title>mio::event::event::Event::token (2 samples, 0.03%)</title><rect x="182.9" y="357" width="0.4" height="15.0" fill="rgb(228,7,5)" rx="2" ry="2" />
<text  x="185.91" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_free (90 samples, 1.39%)</title><rect x="606.8" y="325" width="16.4" height="15.0" fill="rgb(236,28,53)" rx="2" ry="2" />
<text  x="609.83" y="335.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,287 samples, 19.85%)</title><rect x="346.2" y="373" width="234.2" height="15.0" fill="rgb(253,101,21)" rx="2" ry="2" />
<text  x="349.18" y="383.5" >&lt;core::future::from_generator::..</text>
</g>
<g >
<title>tokio::coop::CURRENT::__getit (3 samples, 0.05%)</title><rect x="469.8" y="341" width="0.5" height="15.0" fill="rgb(240,101,38)" rx="2" ry="2" />
<text  x="472.77" y="351.5" ></text>
</g>
<g >
<title>tokio::io::driver::Driver::turn (61 samples, 0.94%)</title><rect x="179.6" y="373" width="11.1" height="15.0" fill="rgb(223,177,0)" rx="2" ry="2" />
<text  x="182.64" y="383.5" ></text>
</g>
<g >
<title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.03%)</title><rect x="179.3" y="341" width="0.3" height="15.0" fill="rgb(232,58,11)" rx="2" ry="2" />
<text  x="182.27" y="351.5" ></text>
</g>
<g >
<title>parking_lot::condvar::Condvar::notify_one_slow (10 samples, 0.15%)</title><rect x="812.3" y="197" width="1.8" height="15.0" fill="rgb(213,221,34)" rx="2" ry="2" />
<text  x="815.32" y="207.5" ></text>
</g>
<g >
<title>std::sys::unix::net::Socket::recv_with_flags (255 samples, 3.93%)</title><rect x="953.9" y="277" width="46.4" height="15.0" fill="rgb(217,220,22)" rx="2" ry="2" />
<text  x="956.93" y="287.5" >std:..</text>
</g>
<g >
<title>__vdso_clock_gettime (17 samples, 0.26%)</title><rect x="298.7" y="341" width="3.1" height="15.0" fill="rgb(215,161,14)" rx="2" ry="2" />
<text  x="301.67" y="351.5" ></text>
</g>
<g >
<title>core::tuple::&lt;impl core::cmp::Ord for  (4 samples, 0.06%)</title><rect x="291.4" y="373" width="0.7" height="15.0" fill="rgb(251,209,33)" rx="2" ry="2" />
<text  x="294.39" y="383.5" ></text>
</g>
<g >
<title>tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="252.6" y="341" width="0.2" height="15.0" fill="rgb(215,210,44)" rx="2" ry="2" />
<text  x="255.63" y="351.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_notified_by_val (38 samples, 0.59%)</title><rect x="799.6" y="229" width="6.9" height="15.0" fill="rgb(240,136,37)" rx="2" ry="2" />
<text  x="802.58" y="239.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,610 samples, 71.11%)</title><rect x="316.5" y="389" width="839.1" height="15.0" fill="rgb(226,52,40)" rx="2" ry="2" />
<text  x="319.51" y="399.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text>
</g>
</g>
</svg>
